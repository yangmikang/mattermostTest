<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<style>
	.subBt, .fileIp {
		display: none;
	}
	.conts-area{
	
		margin-bottom:5%;
	}
	
	.flag-icon::before,
	.organizer-daejeon::before,
	.organizer-dortmund::before,
	.organizer-malaga::before,
	.organizer-montgomery::before,
	.organizer-seattle::before,
	.organizer-quebec::before,
	.gini::before,
	.organizer-default::before {
	  content: "";
	  display: inline-block;
	  width: 28px;
	  height: 28px;
	  margin-right: 3px;
	  background-size: contain;
	  background-repeat: no-repeat;
	  background-position: center;
	}
	.upload-list {
		 margin-bottom: 1.4%;
	}
	.upload-list > li {
	    align-items: center;
	    flex-direction: row;
	    width: 100%;
	    min-height: 6.4rem;
	    display:flex;
	    padding: var(--krds-spacer-3) var(--krds-spacer-4) !important;
	    border: 1px solid var(--krds-gray-40) ;
	    border-radius: 0.6rem !important;
	    color: var(--krds-gray-90) !important;
	    justify-content: space-between !important;
	    align-items: center !important; 
	    }
	    .in{
	    	width:100% !important;
	    
	    }
	.organizer-daejeon::before    { 
	
		background-image: url('../../img/component/common/ico_korea.svg'); 
	
	}
	.organizer-dortmund::before    {
			 background-image: url('../../img/component/common/ico_germany.svg');
	}
	.organizer-malaga::before      { background-image: url('../../img/component/common/ico_spain.svg'); }
	.organizer-montgomery::before  {
	
	 background-image: url('../../img/component/common/ico_usa.svg'); 
	}
	.organizer-seattle::before     { background-image: url('../../img/component/common/ico_usa.svg'); }
	.organizer-quebec::before      { background-image: url('../../img/component/common/ico_canada.svg'); }
	.gini::before                  { background-image: url('../../img/component/common/ginilogo.png'); }
	.organizer-default::before     { background-image: url('../../img/component/common/ico_default.svg'); }
	.is-error{
	    border: 0.2rem solid var(--krds-danger) !important;
	    display: flex !important;
	    flex-direction: column !important;
	}
	.thumb-sec{
		display: flex;
	    align-items: center;
	    overflow: hidden;
	    border-radius: 10px;
  	 	color:#888;
	}

	.upload-list > li {
	    border: 1px solid var(--krds-gray-40) !important;
	    border-radius: 0.6rem;
	    color: var(--krds-gray-90) !important;
    }
    .cancel{
    	display: none;
    }
</style>

<body>
	<!-- 컨테이너 영역 -->
	<div id="container">
		<div class="page-title-wrap visual img-members">
			<div class="visual-filter"></div>
			<div class="inner">
				<!-- breadcrumb -->
				<nav class="breadcrumb-wrap" aria-label="브레드크럼">
					<ol class="breadcrumb">
						<li class="home"><a href="#" class="txt">Home</a></li>
						<li><a href="#" class="txt">News</a></li>
						<c:choose>
							<c:when test="${boardVo.boardMasterCode eq 'N01'}">
								<li><a href="#" class="txt">GINI News</a></li>
							</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N02'}">
								<li><a href="#" class="txt">Members News</a></li>
							</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N03'}">
								<li><a href="#" class="txt">Media Release</a></li>
							</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N04'}">
								<li><a href="#" class="txt">Q&A</a></li>
							</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N05'}">
								<li><a href="#" class="txt">Members</a></li>
							</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N06'}">
								<li><a href="#" class="txt">Action Group</a></li>
							</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'A01'}">
								<li><a href="#" class="txt">Publications</a></li>
							</c:when>
							<c:otherwise>
								<li><a href="#" class="txt">Board</a></li>
							</c:otherwise>
						</c:choose>
						<li><a href="#" class="txt">
						<c:choose>
							<c:when test="${boardVo.boardMasterCode eq 'N01'}">GINI News Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N02'}">Members News Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N03'}">Media Release Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N04'}">Q&A Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N05'}">Members Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N06'}">Action Group Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'A01'}">Publications Details</c:when>
							<c:otherwise>Board</c:otherwise>
						</c:choose>
						
						</a></li>
					</ol>
				</nav>
				<!-- 제목 영역 -->
				<div class="visual-area">
					<h2 class="h-tit">
						<c:choose>
							<c:when test="${boardVo.boardMasterCode eq 'N01'}">GINI News Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N02'}">Members News Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N03'}">Media Release Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N04'}">Q&A Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N05'}">Members Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N06'}">Action Group Details</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'A01'}">Publications Details</c:when>
							<c:otherwise>Board</c:otherwise>
						</c:choose>
					</h2>

					<p>
						<c:choose>
							<c:when test="${boardVo.boardMasterCode eq 'N01'}">Stay updated with the latest announcements from GINI.</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N02'}">Get the latest updates and news from our members.</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N03'}">Browse official media releases and announcements.</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N04'}">Find answers to frequently asked questions.</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N05'}">Explore member profiles and collaboration details.</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'N06'}">Discover events and initiatives from action groups.</c:when>
							<c:when test="${boardVo.boardMasterCode eq 'A01'}">Discover events and initiatives from action groups.</c:when>
							<c:otherwise>Check the details of the post below.</c:otherwise>
						</c:choose>
					</p>

				</div>
			</div>
		</div>
		<!-- breadcrumb -->

		<form class="form-horizontal" id="form" action="/contract/create"
			method="post" enctype="multipart/form-data">

			<input type="hidden" name="fileGroupNo"
				value="${boardVo.fileGroupNo}" /> <input type="hidden"
				class="boardCode" id="boardCode" name="boardCode"
				value="${boardVo.boardCode}" id="" readonly> <input
				type="hidden" class="ip" name="" value="${boardVo.cityCode}" id=""
				readonly>
			<!-- 컨텐츠 영역 -->
			<div class="inner">
				<div class="conts-area">
					<div class="conts-detail-wrap txt-box bg-white">
						<!-- real contents -->
						<div class="conts-wrap scroll-check">
							<div class="conts-wrap section-link" id="section_01">
								<h3 class="sec-tit">${boardVo.title}</h3>
								</h3>
								<!-- table list -->
								<div class="tbl-wrap">
									<dl class="tbl def-list">
										<dt class="Bdtitle" style="display: none;">Title</dt>
										<dd class="Bdtitle" style="display: none;">
											<div class="form-conts ">
												<input type="text" id="edit_title" maxlength="150"
													value="${boardVo.title}" class="form-control"
													autocomplete="on" placeholder="title" name="title">
											</div>
										</dd>
										<dt>Author</dt>

										<dd class="flag-icon" style="display: flex; align-items: center;" data-city-code="${boardVo.cityCode}"  onclick="applyFlagIcons()">
											${boardVo.username}
										</dd>
										<dt>Creation date</dt>
										<dd>${boardVo.regDate}</dd>
										<dt>Content</dt>
										<dd>
											<span class="Recont">${boardVo.content}</span>
											<div class="form-conts" id="content" style="display: none;">
												<textarea rows="10" cols="50" id="edit_content"
													class="updtcon content form-control" name="content"
													maxlength="10000" class="form-control" name="content"
													placeholder="content">${boardVo.content}</textarea>
											</div>
										</dd>

										<c:if test="${boardVo.fileGroupVO != null}">
											<c:forEach var="fileDetailVO"
												items="${boardVo.fileGroupVO.fileDetailVOList}"
												varStatus="stat">
												<c:if test="${fileDetailVO.fileType == 'THUMBNAIL' and boardVo.boardMasterCode != 'N05' and boardVo.boardMasterCode != 'N06'}">
													<dt>Thumbnail</dt>
													<dd>
													<div class="form-tit lg thumb-sec">
														<%-- <img class="img-fluid imgFileSaveLocate thumbnail-preview"
																     style="cursor: pointer; display: block;"
																     src="${pageContext.request.contextPath}${fileDetailVO.fileSaveLocate}"
																     data-file-original-name="${fileDetailVO.fileOriginalName}"
																     data-file-save-locate="${fileDetailVO.fileSaveLocate}"
																     onerror="this.onerror=null; this.outerHTML='-';" /> --%>
														<div class="form-tit lg thumb-sec">
															  <img class="img-fluid  thumbnail-preview"
															       src="${pageContext.request.contextPath}${fileDetailVO.fileSaveLocate}"
															       onerror="this.style.display='none'; 
															                if(!this.nextElementSibling || !this.nextElementSibling.classList.contains('fallback')){
															                  var span=document.createElement('span');
															                  span.className='fallback';
															                  span.textContent='No thumbnail image available.';
															                  this.after(span);
															                }">
														</div>
															
														<%-- <img class="img-fluid imgFileSaveLocate thumbnail-preview"
															style="cursor: pointer; display: block;"
															src="${pageContext.request.contextPath}${fileDetailVO.fileSaveLocate}"
															data-file-original-name="${fileDetailVO.fileOriginalName}"
															data-file-save-locate="${fileDetailVO.fileSaveLocate}"  onerror="this.onerror=null; this.classList.add('no-image'); this.outerHTML='No thumbnail image available.';"/> --%>
													 </div>		
													</dd>
												</c:if>
											</c:forEach>
										</c:if>
										<c:if test="${boardVo.boardMasterCode == 'N01' || boardVo.boardMasterCode == 'N02' || boardVo.boardMasterCode == 'N03' ||boardVo.boardMasterCode == 'A01'}">
											<dt id="thumbnailTT" style="display: none;">Thumbnail Attachment </dt>
												<dd class="thumbnail-field" style="display: none">
											<div id="thumbCont" >
													<div class="form-group margin-b">
														<div class="form-tit lg"></div>
														<div class="form-conts row">
															<input id="fileNm" type="text" maxlength="16"
																class="form-control" placeholder="Thumbnail file name"
																readonly>
															<button type="button" class="btn lg secondary"
																onclick="document.getElementById('thumbnail').click()">
																Search</button>
														</div>
														<p class="form-hint info">Allow up to 20MB</p>
														<input type="file" name="thumbnailFile" id="thumbnail"
															style="display: none;"
															onchange="setThumbnailFileName(); previewThumbnail(event)" />
													</div>
											</div>
												</dd>
										</c:if>
										<c:if test="${boardVo.fileGroupVO != null}">
										
											<dt style="display: block;" class="upload-file ">File Attachments</dt>
											<dd  class="upload-file ">
												<div class="gini-cont-box">
													<div class="row">
														<!-- 파일업로드 -->
														<div class="file-upload cont50" id="ddgini"  style="display: none;">
															<p class="txt">Click the Choose File button to select a file.</p>
															<button type="button"
																class="btn primary ico-before ico-upload md"
																onclick="document.getElementById('uploadFiles').click()">Choose File</button>

															<input type="file" multiple id="uploadFiles"
																style="display: none;"
																onchange="handleFileUpload(event)" />
														</div>
														<div class="file-upload-result cont50">
															  <button type="button" class="btn xsm tertiary  down allDown" onclick="fn_dwMulti()">Download All Files</button>
														
															<div class="upload-top" >
																<div class="file-total">
																	<span class="current">0</span> / 6
																</div>
															</div>
															<ul class="upload-list" id="fileListArea">
															</ul>
															<div class="upload-delete-btn">
																<!-- 	<button type="button"
																		class="btn btn-txt ico-before ico-del sm h-auto "
																		onclick="deleteAllFiles()">delete all</button> -->
															</div>
														</div>
													 <ul class="box-group-area ">
                                                                <c:forEach var="fileDetailVO" items="${boardVo.fileGroupVO.fileDetailVOList}" varStatus="stat">
                                                                
                                                                    <c:if test="${fileDetailVO.fileType eq 'GENERAL'}">
                                                                     
                                                                        <li>
	                                                                        <div class="in" style="width: 100%;display: flex;justify-content: space-between;">
	                                                                         <%--    <img class="img-fluid imgFileSaveLocate" style="display: none;" src="<c:url value='${fileDetailVO.fileSaveLocate}' />" data-file-original-name="${fileDetailVO.fileOriginalName}" data-file-save-locate="${fileDetailVO.fileSaveLocate}" />
	                                                                          --%>   <p class="tit" onclick="fn_dw(this)"  data-file-save-locate="${fileDetailVO.fileSaveLocate}" style="cursor: pointer;">${fileDetailVO.fileOriginalName} [${fileDetailVO.fileExt}, ${fileDetailVO.fileFancySize}]
	                                                                            </p>
	                                                                            <div class="btn-wrap">
	                                                                            </div>
	                                                                            <button type="button" class=" btn btn-txt ico-before ico-del sm h-auto del" style="display:none;" onclick="deleteSingleFile(null, this, '${fileDetailVO.fileSn}')">Delete</button>
	                                                                        </div>
                                                                        </li>
                                                                        <input type="hidden" name="existingFileIds" value="${fileDetailVO.fileSn}" />
                                                                    </c:if>
                                                                </c:forEach>
                                                            </ul>
													
													</div>
												</div>
											</dd>
										</c:if>
								</div>

							</div>
						</div>
						</dl>
						<div class="page-btn-wrap both">
							<div>
								<c:set var="code" value="${boardVo.boardMasterCode}" />
								<button type="button" class="btn lg primary"
								    onclick="location.href='${pageContext.request.contextPath}/board/boardList.do?boardMasterCode=${empty code ? 'N01' : code}'">
								    Back to List
								</button>
							</div>
							<div id="userBtn" style="display: none;">
								<input type="hidden" name="boardMasterCode" value="..." /> <input
									type="checkbox" name="deleteFileIds"
									value="${fileDetailVO.fileNo}" />
								<button type="button" class="btn lg secondary edit" onclick="updateBd()">Edit</button>
								<button type="submit" class="btn lg secondary subBt">Save Changes</button>
								<button type="button" class="btn lg tertiary delete"
									onclick="deleteBd()">Delete</button>
								<button type="button" class="btn lg tertiary cancel" onclick="cancelEdit()">Cancel</button>
							</div>
						</div>
						
						<input type="hidden" id="origTitle"  value="${boardVo.title}">
						<input type="hidden" id="origContent" value="${boardVo.content}">
						<input type="hidden" id="boardCode" value="${boardVo.boardCode}">
						
						<input type="hidden" name="boardMasterCode" id="boardMasterCode" value="${boardVo.boardMasterCode}" /> 
						<input type="hidden" name="" id="" value="${boardVo.userId}" />
					</div>
				</div>
				<!-- //컨테이너 영역 -->
			</div>
		</form>
			</div>
		<c:if test="${ sessionScope.loggedInUser.id eq boardVo.userId or fileuserType eq 'A'}">
			<script type="text/javascript">
                let userBtn = document.querySelector("#userBtn")
                		userBtn.style.display = 'block'
            </script>
		</c:if>
		<c:set var="generalCount" value="0" />
		<c:forEach var="file" items="${boardVo.fileGroupVO.fileDetailVOList}">
		    <c:if test="${file.fileType == 'GENERAL'}">
		        <c:set var="generalCount" value="${generalCount + 1}" />
		    </c:if>
		</c:forEach>
		
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js'></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/locales/ko.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script type="text/javascript">

	let isEditMode = true; 

	document.addEventListener("DOMContentLoaded", function () {
	    const generalFileCount = '${generalCount}';
	    function uploadFile() {
	        const uploadFields = document.querySelectorAll(".upload-file");
	        if (generalFileCount <= 0) {
	            uploadFields.forEach(el => el.style.display = "none");
	        } else {
	            uploadFields.forEach(el => el.style.display = "");
	        }
	    }

	    uploadFile(); 
	});


		
	function applyFlagIcons() {
		  document.querySelectorAll(".flag-icon").forEach(function(el) {
		    const cityCode = el.getAttribute("data-city-code");
		    const iconClass = getFlagIcon(cityCode);
		    el.classList.add(iconClass);
		  });
	}

	function getFlagIcon(cityCode) {
	  switch (cityCode) {
	    case "01": return "organizer-daejeon";
	    case "02": return "organizer-dortmund";
	    case "03": return "organizer-malaga";
	    case "04": return "organizer-montgomery";
	    case "05": return "organizer-seattle";
	    case "06": return "organizer-quebec";
	    case "07": return "gini";
	    default: return "organizer-default";
	  }
	}

	document.addEventListener("DOMContentLoaded", applyFlagIcons);


	const contextPath = '${pageContext.request.contextPath}';
	const fileList = [
	  <c:forEach var="fileDetailVO" items="${boardVo.fileGroupVO.fileDetailVOList}" varStatus="stat">
	  <c:if test="${fileDetailVO.fileType eq 'GENERAL'}">
	    {
	      name: "${fileDetailVO.fileOriginalName}",
	      path: "${fileDetailVO.fileSaveLocate}"
	    }
	    <c:if test="${not stat.last}">
	      ,
	    </c:if>
	  </c:if>
	  </c:forEach>
	];
	 function previewThumbnail(event) {
		  const input = event.target;
		  if (!(input.files && input.files[0])) return;

		  const wrap = document.querySelector('.thumb-sec');
		  if (!wrap) return;

		  // 이미지 태그 재사용
		  let img = wrap.querySelector('img.thumbnail-preview');
		  if (!img) {
		    img = document.createElement('img');
		    img.className = 'img-fluid imgFileSaveLocate thumbnail-preview';
		    wrap.prepend(img);
		  }

		  // fallback span 제거
		  const fb = wrap.querySelector('.fallback');
		  if (fb) fb.remove();

		  const file = input.files[0];
		  const url = URL.createObjectURL(file);
		  img.onload = () => {
		    img.style.display = 'block';
		    URL.revokeObjectURL(url);
		  };
		  img.src = url;
		}


	 function cancelEdit() {
		  location.reload(); 
		}
		
	function clearThumbnailPreview() {
	  const wrap = document.querySelector('.thumb-sec');
	  if (!wrap) return;
	  const img = wrap.querySelector('#thumbPreview');
	  if (img) img.remove();
	  if (!wrap.querySelector('.thumb-fallback')) {
	    const s = document.createElement('span');
	    s.className = 'thumb-fallback';
	    s.textContent = '-';
	    wrap.appendChild(s);
	  }
	}

    document.addEventListener("DOMContentLoaded", function () {
    	
    	const boxGroup = document.querySelector('.box-group-area');

    	if (boxGroup && boxGroup.children.length > 0) {
    	    //console.log("파일 있음");
    		updateFileCount();
    	} else {
    	    //console.log("파일 없음");
    	}
     	
    });
          
          //전역 파일 저장 배열
          let uploadedFiles = [];
          let deletedFileIds = []
          function setThumbnailFileName() {
              const fileInput = document.getElementById("thumbnail");
              const fileNameInput = document.getElementById("fileNm");
          
              if (fileInput.files.length > 0) {
                  const file = fileInput.files[0];
                  const fileName = file.name;
                  const extension = fileName.split('.').pop().toLowerCase();
                  const allowedExtensions = ['jpg', 'jpeg', 'png'];
          
                  if (!allowedExtensions.includes(extension)) {
                      alert("Only image files (JPG, JPEG, PNG) are allowed as thumbnails.");
                      fileInput.value = ''; 
                      fileNameInput.value = '';
                      return;
                  }
          
                  fileNameInput.value = fileName;
              } else {
                  fileNameInput.value = "";
              }
          }
          
          function formatBytes(bytes) {
            if (bytes === 0) return '0KB';
            const k = 1024;
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            const size = parseFloat((bytes / Math.pow(k, i)).toFixed(1));
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            return `\${size} \${sizes[i]}`;
          }
          
          function updateFileCount() {
          	  const countSpan = document.querySelector('.file-total .current');
          	  const existingCount = document.querySelectorAll('input[name="existingFileIds"]').length;
          	  const validExistingCount = existingCount - deletedFileIds.length;
          	  const totalCount = validExistingCount + uploadedFiles.length;
          	  countSpan.textContent = `\${totalCount}`;
          }
          
          function deleteAllFiles() {
            uploadedFiles = [];
            const fileListArea = document.getElementById('fileListArea');
            fileListArea.innerHTML = '';
            updateFileCount();
          }
          
          function handleFileUpload(event) {
          	  const files = event.target.files;
          	  const fileListArea = document.getElementById('fileListArea');
          	  const allowedExtensions = [
          	  	  'pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt',
          	  	  'jpg', 'jpeg', 'png', 'gif', 'zip', 'hwp'
          	  	];
          	  const existingCount = document.querySelectorAll('input[name="existingFileIds"]').length;
          	  const validExistingCount = existingCount - deletedFileIds.length;
          
          	  for (let i = 0; i < files.length; i++) {
          	    const file = files[i];
          	    const extension = file.name.split('.').pop().toLowerCase();
          
          	      if (!allowedExtensions.includes(extension)) {
          	          const li = document.createElement('li');
          	          li.classList.add('is-error');
          	          li.innerHTML =
          	        	  '<div class="in">' +
          	        	    '<div class="file-name">' + file.name + ' [' + file.name.split('.').pop() + ', ' + formatBytes(file.size) + ']</div>' +
          	        	    '<div class="file-btn">' +
          	        	      '<span class="ico-invalid error"><em class="sr-only">error</em></span>' +
          	        	      '<button type="button" class="btn btn-txt ico-before ico-del sm h-auto" onclick="this.closest(\'li\').remove(); updateFileCount();">Delete</button>' +
          	        	    '</div>' +
          	        	  '</div>' +
          	        	  '<p class="file-hint" style="display: flex;width: 100%;justify-content: flex-start;">Only the following file types can be uploaded:<br>' +
          	        	  'pdf, doc, docx, xls, xlsx, ppt, pptx, txt, jpg, jpeg, png, gif, zip, hwp</p>';

          	          fileListArea.appendChild(li);
          	          continue;
          	        }
          
          	    if (file.size > 20 * 1024 * 1024) {
          	    	const li = document.createElement('li');
          	    	uploadedFiles.push(file);
          	    	const index = uploadedFiles.length;
          
          	    	li.innerHTML =
          	    		  '<div class="in">' +
          	    		    '<div class="file-name">' + file.name + ' [' + file.name.split('.').pop() + ', ' + formatBytes(file.size) + ']</div>' +
          	    		    '<div class="file-btn">' +
          	    		      '<button type="button" class="btn btn-txt ico-before ico-del sm h-auto" style="border:none;" ' +
          	    		        'onclick="deleteSingleFile(' + index + ', this)">Delete</button>' +
          	    		    '</div>' +
          	    		  '</div>';

          	    	fileListArea.appendChild(li);
          
          	      continue;
          	    }
          
          	    if (uploadedFiles.length + validExistingCount >= 6) {
          	      alert("You can register up to 6 files.");
          	      break;
          	    }
          
          	    uploadedFiles.push(file);
          	    const index = uploadedFiles.length;
          
          	    const li = document.createElement('li');
          	    li.innerHTML =
          	    	  '<div class="in">' +
          	    	    '<div class="file-name">' + file.name + ' [' + file.name.split('.').pop() + ', ' + formatBytes(file.size) + ']</div>' +
          	    	    '<div class="file-btn">' +
          	    	      '<button type="button" class="btn btn-txt ico-before ico-del sm h-auto" style="border:none;" ' +
          	    	        'onclick="deleteSingleFile(' + index + ', this)">Delete</button>' +
          	    	    '</div>' +
          	    	  '</div>';

          	    fileListArea.appendChild(li);
          	  }
          
          	  updateFileCount();
          	  event.target.value = '';
          	}
          /* 파일 삭제시 li삭제   */
          function deleteSingleFile(index, button, fileId = null) {
            if (fileId) {
              deletedFileIds.push(Number(fileId));
              const hiddenInput = document.querySelector(`input[name="existingFileIds"][value="${fileId}"]`);
              if (hiddenInput) hiddenInput.remove();
            } else {
              const fileName = button.closest('li').querySelector('.file-name').textContent.split(' [')[0];
              const fileIndex = uploadedFiles.findIndex(file => file.name === fileName);
              if (fileIndex > -1) uploadedFiles.splice(fileIndex, 1);
            }
            button.closest('li').remove();
            updateFileCount();
          }
          
          /*  업데이트 section 활성화   */
            function updateBd() {
            	if (isEditMode) {
        		    document.querySelectorAll(".tit").forEach(function(el){
	        		    el.style.pointerEvents = "none"; 
        		    	
        		    })
        		}
	          	  document.querySelectorAll(".upload-file").forEach(function (el) {
	                    el.style.display = "block"; 
	                    })
	          	  document.querySelector(".edit").style.display = 'none';
	          	  document.querySelector(".subBt").style.display = 'inline-flex';
	          	  let cancel = document.querySelector(".cancel");
	          	  cancel.style.display = "inline-flex";
	          	  let deletebt = document.querySelector(".delete");
	           	  deletebt.style.display = "none";
	          	  let thumbSec = document.querySelector(".thumb-sec")
	          	  let noImage = document.querySelector(".no-image")
	          	  if(thumbSec){
	          		thumbSec.style.border = 'solid gray 1px';
	          		thumbSec.style.width = '52.1%';
	          		thumbSec.style.height = '50vh';
	          		thumbSec.style.justifyContent= 'center';
	          	  }
	          	  let allDown = document.querySelector(".allDown")
	          	  if(allDown){
	          		  
	           	  allDown.style.display = 'none';
	          		  
	          	  }
	          	  
	          	  let ddgini = document.querySelector("#ddgini")
	          	  if(ddgini){
	          		  ddgini.style.display = 'flex';
	          	  }
	          	  const thumbnailField = document.querySelector(".thumbnail-field");
	          	  if (thumbnailField) {
	          		  thumbnailField.style.display = 'block';
	          	  }
	          
	          	  const thumbnailTT = document.querySelector("#thumbnailTT");
	          	  if (thumbnailTT) {
	          	    thumbnailTT.style.display = 'block';
	          	  }
	          
	          	  
	          	  
	          	  var titleElements = document.querySelectorAll(".Bdtitle");
	          	  for (var i = 0; i < titleElements.length; i++) {
	          	    titleElements[i].style.display = 'block';
	          	  }
	
	          	  document.querySelector("#content").style.display = 'block';
	
	          	  var delButtons = document.querySelectorAll(".del");
	          	  for (var i = 0; i < delButtons.length; i++) {
	          	    delButtons[i].style.display = 'inline-flex';
	          	  }
	
	          	  document.querySelector(".sec-tit").style.display = 'none';
	          	  document.querySelector(".Recont").style.display = 'none';
	          
	          	  document.querySelectorAll(".updtcon").forEach(function (el) {
	          	    el.removeAttribute("readonly");
	          	    el.style.border = "1px solid gray";
	          	  });
	          
	          	  const form = document.getElementById("form");
	          	  form.setAttribute("action", "${pageContext.request.contextPath}/board/update.do");
	          	  form.setAttribute("method", "post");
	          	  const editSuffix = " Edit";

		          	const pageTitle = document.querySelector(".h-tit");
		          	if (pageTitle && !pageTitle.textContent.startsWith(editSuffix)) {
		          	  pageTitle.textContent = editSuffix + pageTitle.textContent;
		          	}

            }
          
            document.querySelector('.subBt').addEventListener('click', function (e) {
          	    e.preventDefault();
          	    validateFormAndSubmit(); 
          	});
           
            /*  게시글 삭제   */
            function deleteBd() {
          	  const result = confirm("Are you sure you want to delete it?");
          	  if (!result) {
          	    alert("Deletion has been undone.");
          	    return;
          	  }
          
          	  const boardCode = document.getElementById("boardCode").value;
          	  const boardMasterCode = document.getElementById("boardMasterCode").value;
          
          	  axios.post(`${pageContext.request.contextPath}/board/delete.do`, {
          	    boardCode: boardCode,
          	    boardMasterCode: boardMasterCode
          	  })
          	  .then(res => {
          	    const redirectUrl = res.data;
          	    alert("It has been deleted.");
          	    
          	    
          	    location.href = `${pageContext.request.contextPath}/board/boardList.do?boardMasterCode=\${boardMasterCode}`;
          	  })
          	  .catch(error => {
          	    console.error("삭제 오류:", error);
          	    alert("Deletion failed.");
          	  });
          	}
          
            /*  파일 다운로드   */
           function fn_dw(el) {
          	  const userAuth = ${fileuserYn != 'Y' || fileuserType != 'A'}
          	  const fileuserYn = '${fileuserYn}';     // e.g. 'Y' or 'N'
          	  const fileuserType = '${userType}'; // e.g. 'A', 'G', 'N'
          	  const hasAuth = fileuserYn === 'Y' || fileuserType === 'A';
              const target = el.dataset.fileSaveLocate;
           	  //console.log("target:", target);
          	 
           	  if (!hasAuth) {
          	    alert("You do not have permission to download.");
          	    return;
          	  }
              if (target) {
                const fileSaveLocate = target;
                //console.log("fileSaveLocate : " + fileSaveLocate);
                location.href = "${pageContext.request.contextPath}/download.do?fileName=" + encodeURIComponent(fileSaveLocate);
              } else {
                console.warn(".imgFileSaveLocate 요소를 찾을 수 없습니다.");
              }
            };d
            ddd
            /* 다건 파일 압축 다운로드   */
    	    function fn_dwMulti() {
    	    	 const userAuth = ${fileuserYn != 'Y' || fileuserType != 'A'}
         	  const fileuserYn = '${fileuserYn}';    
         	  const fileuserType = '${fileuserType}'; 

         	  const hasAuth = fileuserYn === 'Y' || fileuserType === 'A';

         	  //console.log("userAuth:", hasAuth);

         	  if (!hasAuth) {
         	    alert("You do not have permission to download.");
         	    return;
         	  }
    	    	  if (!fileList || fileList.length === 0) {
    	    	    alert("No file to download.");
    	    	    return;
    	    	  }

    	    	  if (fileList.length === 1) {
    	    	    const file = fileList[0];
    	    	    const url = contextPath +
    	    	      '/download.do?fileName=' + encodeURIComponent(file.path) +
    	    	      '&originalName=' + encodeURIComponent(file.name);
    	    	    location.href = url;
    	    	  } else {
    	    	    const params = fileList.map(function(f) {
    	    	      return 'fileNames=' + encodeURIComponent(f.path);
    	    	    }).join("&");
    	    	    const url = contextPath + '/downloadMulti.do?' + params;
    	    	    location.href = url;
    	    	  }
    	    }
    	  function escapeForJs(str) {
    		  return str
    		    .replace(/\\/g, '\\\\') 
    		    .replace(/"/g, '\\"')   
    		    .replace(/'/g, "\\'");  
    		}
    	  
    	 /* 업데이트 밸리데이션 체크   */
    	 function validateFormAndSubmit() {
			  const content = document.querySelector("#edit_content").value.trim();
			  const boardMasterCode = document.querySelector("#boardMasterCode").value.trim();
			  const thumbnailTT = document.querySelector("#thumbnailTT");
			  const thumbnailInput = document.getElementById("thumbnail");
			  const thumbnailPreview = document.querySelector(".thumbnail-preview");
			  const title = document.querySelector("#edit_title").value;
			  const boardCode = document.querySelector("#boardCode").value;
			
			  // 유효성
			  if (title === "") { alert("Please enter a title."); return false; }
			  if (title.length > 150) { alert("The title must be no more than 100 characters."); return false; } 
			  if (title.length < 10) { alert("The title must be at least 10 characters long."); return false; }
			
			  if (content === "") { alert("Please enter content."); return false; }
			  if (content.length < 10) { alert("The content must be at least 10 characters."); return false; }
			  if (content.length > 10000) { alert("The content must be no more than 10000 characters."); return false; }
			
			  if (thumbnailTT && thumbnailTT.style.display !== "none") {
			    const hasExistingThumbnail = thumbnailPreview && thumbnailPreview.src && !thumbnailPreview.src.includes("no-image");
			    const hasNewThumbnail = thumbnailInput && thumbnailInput.files.length > 0;
			    if (!hasExistingThumbnail && !hasNewThumbnail) {
			      alert("Please upload a thumbnail image.");
			      return false;
			    }
			  }
			  const errorItems = document.querySelectorAll('#fileListArea li.is-error');
			  if (errorItems.length > 0) {
			    alert("There is an invalid file in the attachment list. Please delete it.");
			    return false;
			  }
			
			  const origTitleRaw   = (document.getElementById("origTitle").value   || '').replace(/\r?\n/g, '');
			  const origContentRaw = (document.getElementById("origContent").value || '').replace(/\r?\n/g, '');
			
			  const currentTitleRaw   = (document.querySelector("#edit_title").value   || '').replace(/\r?\n/g, '');
			  const currentContentRaw = (document.querySelector("#edit_content").value || '').replace(/\r?\n/g, '');
			
			  const isTitleChanged   = currentTitleRaw   !== origTitleRaw;
			  const isContentChanged = currentContentRaw !== origContentRaw;
			  const isFileChanged    = uploadedFiles.length > 0 || deletedFileIds.length > 0;
			  const isThumbChanged   = thumbnailInput && thumbnailInput.files.length > 0;
			
			  if (!isTitleChanged && !isContentChanged && !isFileChanged && !isThumbChanged) {
			    alert("There is no change to update.");
			    return false;
			  }
			
			  // 변경된 필드만 역슬래시 정규화
			  if (isTitleChanged) {
			    const el = document.querySelector("#edit_title");
			    el.value = el.value.replace(/\\/g, '\\');
			  }
			  if (isContentChanged) {
			    const el = document.querySelector("#edit_content");
			    el.value = el.value.replace(/\\/g, '\\');
			  }
			
			  const form = document.getElementById("form");
			  const formData = new FormData(form);
			
			  uploadedFiles.forEach(function(file) {
			    formData.append("uploadFiles", file);
			  });
			  deletedFileIds.forEach(function(fileId) {
			    formData.append("deletedFileIds", fileId);
			  });
			
			  const safeTitle   = escapeForJs(document.querySelector("#edit_title").value.trim());
			  const safeContent = escapeForJs(document.querySelector("#edit_content").value.trim());
			  formData.set("title",   safeTitle);
			  formData.set("content", safeContent);
			  
			  var updateUrl = '${pageContext.request.contextPath}/board/update.do';

			  axios.post(updateUrl, formData, {
			      headers: { 'Content-Type': 'multipart/form-data', 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'application/json' }
			  })
			  .then(function (res) {
			      var ct = (res.headers && res.headers['content-type']) || '';
			      var needLogin = (res.status === 401 || res.status === 403 ||
			                       (res.headers && res.headers['x-login-required'] === 'true') ||
			                       (res.data && res.data.reason === 'SESSION_EXPIRED') ||
			                       ct.indexOf('text/html') !== -1);
					//alert("res.status" + res.status)
			      if (needLogin) {
			          alert('Session has expired. Please log in again.');
			          location.href = '${pageContext.request.contextPath}/login.do?returnUrl=' + encodeURIComponent(location.href);
			          return;
			      }

			      if (res.data && res.data.success) {
			          redirectToDetail();
			      } else {
			          alert((res.data && res.data.message) ? res.data.message : 'Update failed.');
			          if (res.data && res.data.redirectUrl) {
			              location.href = '${pageContext.request.contextPath}' + res.data.redirectUrl;
			          }
			      }
			  })
			  .catch(function (error) {
				  
			      if ( error && error.response && ( error.response.status === 401 || error.response.status === 403 ) ) {
			          alert('Session has expired. Please log in again.');
			          location.href = '${pageContext.request.contextPath}/login.do?returnUrl=' + encodeURIComponent(location.href);
			          return;
			      }
			      console.error('업데이트 실패:', error);
			      alert('Unable to update the post at this time. Please try again later.');
				  location.href = '${pageContext.request.contextPath}/board/detail.do?boardCode=' + boardCode;
			  });

			
			  return false; 
			}
    	

    	function redirectToDetail() {
    	    alert("Post has been successfully updated.");
    	    const boardCode = document.getElementById("boardCode").value;
    	    location.href = `${pageContext.request.contextPath}/board/detail.do?boardCode=\${boardCode}`;
    	}

</script>
</body>
