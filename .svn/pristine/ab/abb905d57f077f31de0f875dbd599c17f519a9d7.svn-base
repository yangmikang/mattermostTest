package kr.go.distep.main.web;

import java.io.BufferedReader;
import java.io.IOException;
import java.sql.Clob;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

//import com.initech.eam.nls.CookieManager;
//import com.initech.eam.smartenforcer.SECode;

import egovframework.rte.psl.dataaccess.util.EgovMap;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import kr.go.distep.cmmn.util.StringUtil;
import kr.go.distep.main.service.MainService;
import kr.go.distep.user.vo.UserVO;




@Controller
public class MainController {

	 /** logger */
    protected Logger logger = LoggerFactory.getLogger(this.getClass());

    
	@Resource(name="mainService")
	private MainService mainService; 
	
	@Resource(name = "configProperties")  
	Properties configProperties;
	
	
	@RequestMapping(value="/index.do")
	public ModelAndView index(ModelMap model, HttpSession session, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
	
		ModelAndView view = new ModelAndView();
		
		String referer = (String)request.getHeader("REFERER");
		
		UserVO user = (UserVO) session.getAttribute("loggedInUser");

	    if (user != null) {
	    	model.addAttribute("username", user.getUsername());
	    	System.out.println("username::"+user.getUsername());
	    }
		
		view.addObject("prevURL", referer);
		view.setViewName("main");
		
		return view;
	}
	
	/** 로그인 체크 - ID 조회 **/
	public String loginCheck(ModelAndView view, HttpServletRequest request) throws Exception{
		String ssoId = null;
//		CookieManager.setEncStatus(true);
//		SECode.setCookiePadding("_V42");
//		ssoId = CookieManager.getCookieValue(SECode.USER_ID, request);
		
//		if(ssoId !=null && !ssoId.equals("")){
//			String userName = mainService.selectUserNm(ssoId);
//			view.addObject("userId",ssoId);
//			view.addObject("userName",userName);
//		}else{
//			ssoId = "";
//		}
		return ssoId;
	}
	
	/** 로그인 팝업창 호출    **/
    @RequestMapping(value="/sso/ssoPopupLogin.do")
    public String login(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception { 
    	
    	model.addAttribute("uurl",request.getParameter("returnURI"));
    	model.addAttribute("returnURI",request.getParameter("returnURI"));
    	return "/initech/sso/ssoPopupLogin";
    }
    
	/**
	 * 메인화면 호출
	 * @param defaultVO
	 * @param model
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 * @throws Exception
	 */
	@RequestMapping(value="/view.do")
	public ModelAndView view(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
		ModelAndView view = new ModelAndView();
		
		String ssoId = loginCheck(view, request);
		view.addObject("ssoId", ssoId);
		
		String bbsId = request.getParameter("bbsId"); //게시글ID
		
		try {
			mainService.updateBbsHits(bbsId); //조회수 수정
			
			Map<String, String> param = new HashMap<>();
			param.put("bbsId", bbsId);
			param.put("userId", ssoId);
			
			HttpSession session = request.getSession(true);
			Map<String, Object> userSession = (Map<String, Object>) session.getAttribute("ssUsr");
			if(userSession != null) {
				param.put("isAdmin", userSession.get("isAdmin").toString());
			}else {
				param.put("isAdmin", "N");
			}
			
			
			//게시글 상세
			EgovMap detail = mainService.selectBoardDetail(param);
			
			//내용 CLOB 변환
			Object targetData = detail.get("contents");
			StringBuffer buffer = new StringBuffer();
			BufferedReader reader = new BufferedReader(((Clob)targetData).getCharacterStream());
			String dummy = "";
			while((dummy = reader.readLine()) != null){
				buffer.append(dummy);
			}
			reader.close();
			
			String contents = buffer.toString();
			contents = contents.replaceAll("&lt;", "<");
			contents = contents.replaceAll("&gt;", ">");
			contents = contents.replaceAll("&amp;", "&");
			detail.put("contents", contents);
			
			String title = detail.get("title")+"";
			title = title.replaceAll("&lt;", "<");
			title = title.replaceAll("&gt;", ">");
			title = title.replaceAll("&amp;", "&");
			detail.put("title", title);
			
			
			//댓글 목록
			List<EgovMap> commentList = mainService.selectCommentList(param);
			for (int i = 0; i < commentList.size(); i++) {
				EgovMap map = commentList.get(i);
				String comment = map.get("contents")+"";
				comment = comment.replaceAll("&lt;", "<");
				comment = comment.replaceAll("&gt;", ">");
				comment = comment.replaceAll("&amp;", "&");
				map.put("contents", comment);
			}
			
			//첨부파일 목록 조회
			List<EgovMap> fileList = mainService.selectKabAttachFileList(bbsId);
			
			//검색, 페이지 정보
			Map<String, String> boardParam = new HashMap<>();
			boardParam.put("pageIndex",StringUtil.nullToEmptyString(request.getParameter("pageIndex"), "1"));
			boardParam.put("searchType",StringUtil.nullToEmptyString(request.getParameter("searchType"), "all"));
			boardParam.put("searchKeyword",StringUtil.nullToEmptyString(request.getParameter("searchKeyword"), "").trim());
			boardParam.put("orderSort",StringUtil.nullToEmptyString(request.getParameter("orderSort"), "bbsId").trim());
			boardParam.put("sort",StringUtil.nullToEmptyString(request.getParameter("sort"), "DESC").trim());
			
			view.setViewName("main/kaist_board_view");
			model.addAttribute("detail", detail);
			model.addAttribute("boardParam", boardParam);
			model.addAttribute("commentList", commentList);
			model.addAttribute("fileList", fileList);
			
			return view;
		} catch (Exception e) {
			model.addAttribute("msg", "존재하지 않는 게시글입니다.");
			model.addAttribute("url", "/index.do");
			
			view.setViewName("main/alert");
			return view;
		}
	}
	
	@RequestMapping(value="/openWrite.do")
	public ModelAndView openWrite(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
	
		ModelAndView view = new ModelAndView();
		String ssoId = loginCheck(view, request);
		view.addObject("ssoId", ssoId);
		view.setViewName("main/kaist_board_write");
		return view;
	}
	
	@RequestMapping(value="/openUpdate.do")
	public ModelAndView openUpdate(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
	
		ModelAndView view = new ModelAndView();
		String ssoId = loginCheck(view, request);
		view.addObject("ssoId", ssoId);
		String bbsId = StringUtil.nullToEmptyString(request.getParameter("bbsId"));
		Map<String, String> param = new HashMap<String, String>();
		param.put("bbsId", bbsId);
		EgovMap detail = mainService.selectBoardDetail(param);
		Object targetData = detail.get("contents");
		StringBuffer buffer = new StringBuffer();
		BufferedReader reader = new BufferedReader(((Clob)targetData).getCharacterStream());
		String dummy = "";
		while((dummy = reader.readLine()) != null){
			buffer.append(dummy);
		}
		reader.close();
		
		String contents = buffer.toString();
		contents = contents.replaceAll("&lt;", "<");
		contents = contents.replaceAll("&gt;", ">");
		detail.put("contents", contents);
		
		//첨부파일 목록조회
		List<EgovMap> fileList = mainService.selectKabAttachFileList(bbsId);
		
		model.addAttribute("detail", detail);
		model.addAttribute("fileList", fileList);
		model.addAttribute("cmd", "update");
		view.setViewName("main/kaist_board_write");
		return view;
	}
	
	@RequestMapping(value="/write.do")
	public ModelAndView write(ModelMap model, HttpServletRequest request, HttpServletResponse response, MultipartHttpServletRequest multipartRequest) throws IOException, Exception {
	
		ModelAndView view = new ModelAndView();
		HashMap<String,Object> map = new HashMap<String, Object>();
		String ssoId = loginCheck(view, request);
		String title = StringUtil.nullToEmptyString(request.getParameter("title"));
		String userId = StringUtil.nullToEmptyString(request.getParameter("userId"));
		String userName = StringUtil.nullToEmptyString(request.getParameter("userName"));
		String contents = StringUtil.nullToEmptyString(request.getParameter("contents"));
		map.put("title", title);
		map.put("userId", userId);
		map.put("userName", userName);
		map.put("contents", contents);

		//등록
		mainService.insertKabBoard(map);
		int bbsId = 0;
		for (String key : map.keySet()){
			if(key.equals("seq")) {
				bbsId =  (int )map.get(key);
			}
	    }
		HashMap<String,Object> paramMap = new HashMap<String, Object>();
		paramMap.put("userId", userId);
		paramMap.put("bbsId", bbsId);
		paramMap.put("cmd", "");
		//첨부파일등록
		mainService.insertKabAttachFile(paramMap, multipartRequest);
		model.addAttribute("msg", "게시글이 등록되었습니다.");
		model.addAttribute("url", "/index.do");

		
		view.setViewName("main/alert");
		return view;
	}
	
	@RequestMapping(value="/update.do")
	public ModelAndView update(ModelMap model, HttpServletRequest request, HttpServletResponse response, MultipartHttpServletRequest multipartRequest) throws IOException, Exception {
	
		ModelAndView view = new ModelAndView();
		HashMap<String,Object> map = new HashMap<String, Object>();
		String ssoId = loginCheck(view, request);
		String bbsId = StringUtil.nullToEmptyString(request.getParameter("bbsId"));
		String title = StringUtil.nullToEmptyString(request.getParameter("title"));
		String userId = StringUtil.nullToEmptyString(request.getParameter("userId"));
		String userName = StringUtil.nullToEmptyString(request.getParameter("userName"));
		String contents = StringUtil.nullToEmptyString(request.getParameter("contents"));
		String cmd = StringUtil.nullToEmptyString(request.getParameter("cmd"));
		String oldFileSaveNm = StringUtil.nullToEmptyString(request.getParameter("oldFileSaveNm"));
		map.put("bbsId", bbsId);
		map.put("title", title);
		map.put("userId", userId);
		map.put("userName", userName);
		map.put("contents", contents);
		
		//수정
		mainService.updateKabBoard(map);
		
		HashMap<String,Object> paramMap = new HashMap<String, Object>();
		paramMap.put("userId", userId);
		paramMap.put("bbsId", bbsId);
		paramMap.put("cmd", cmd);
		paramMap.put("oldFileSaveNm", oldFileSaveNm);
		//첨부파일등록
		mainService.insertKabAttachFile(paramMap, multipartRequest);
		
		model.addAttribute("msg", "게시글이 수정되었습니다.");
		model.addAttribute("url", "/index.do");
		view.setViewName("main/alert");
		return view;
	}
	
	@RequestMapping(value="/delete.do")
	public ModelAndView delete(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
	
		ModelAndView view = new ModelAndView();
		HashMap<String,Object> map = new HashMap<String, Object>();
		String ssoId = loginCheck(view, request);
		String bbsId = StringUtil.nullToEmptyString(request.getParameter("bbsId"));
		String fileSaveName = StringUtil.nullToEmptyString(request.getParameter("fileSaveName"));
		
		map.put("bbsId", bbsId);
		map.put("fileSaveName", fileSaveName);

		//삭제
		mainService.deleteKabBoard(map);
		
		model.addAttribute("msg", "게시글이 삭제되었습니다.");
		model.addAttribute("url", "/index.do");
		view.setViewName("main/alert");
		return view;
	}
	
	@RequestMapping(value="/deleteFile.do")
	public void deleteFile(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {

		ModelAndView view = new ModelAndView();
		HashMap<String,Object> map = new HashMap<String, Object>();
		String ssoId = loginCheck(view, request);
		String bbsId = StringUtil.nullToEmptyString(request.getParameter("bbsId"));
		String fileSaveName = StringUtil.nullToEmptyString(request.getParameter("oldFileSaveNm"));
		
		map.put("bbsId", bbsId);
		map.put("fileSaveName", fileSaveName);

		//삭제
		mainService.deleteKabAttachFile(map);

	}
	
	@RequestMapping(value="/commentWrite.do")
	public ModelAndView commentWrite(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
		ModelAndView view = new ModelAndView();
		
		String bbsId = StringUtil.nullToEmptyString(request.getParameter("bbsId"));
		String page = StringUtil.nullToEmptyString(request.getParameter("pageIndex"),"1");
		String searchType = StringUtil.nullToEmptyString(request.getParameter("searchType"),"all");
		String searchKeyword = StringUtil.nullToEmptyString(request.getParameter("searchKeyword"),"");
		
		Map<String, String> param = new HashMap<>();
		param.put("bbsId",bbsId);
		param.put("userId",StringUtil.nullToEmptyString(request.getParameter("userId")));
		param.put("userName",StringUtil.nullToEmptyString(request.getParameter("userName")));
		param.put("contents",StringUtil.nullToEmptyString(request.getParameter("commentCon")));
		param.put("parentCommentId",StringUtil.nullToEmptyString(request.getParameter("parentCommentId"),"0"));
		
		view.setViewName("redirect:/view.do?pageIndex="+page+"&bbsId="+bbsId+"&searchType="+searchType+"&searchKeyword="+searchKeyword);
		
		try {
			mainService.insertComment(param);
		} catch (SQLException | NullPointerException e) {
			model.addAttribute("msg", "댓글 등록에 실패했습니다.");
			model.addAttribute("url", "/view.do?pageIndex="+page+"&bbsId="+bbsId+"&searchType="+searchType+"&searchKeyword="+searchKeyword);
			
			return view;
		}
		
		return view;
	}
	
	@RequestMapping(value="/commentDelete.do")
	public ModelAndView commentDelete(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
		ModelAndView view = new ModelAndView();
		
		String bbsId = StringUtil.nullToEmptyString(request.getParameter("bbsId"));
		String page = StringUtil.nullToEmptyString(request.getParameter("pageIndex"),"1");
		String searchType = StringUtil.nullToEmptyString(request.getParameter("searchType"),"all");
		String searchKeyword = StringUtil.nullToEmptyString(request.getParameter("searchKeyword"),"");
		
		String commentId = StringUtil.nullToEmptyString(request.getParameter("commentId"));
		
		view.setViewName("redirect:/view.do?pageIndex="+page+"&bbsId="+bbsId+"&searchType="+searchType+"&searchKeyword="+searchKeyword);
		
		try {
			mainService.updateCommentDeleteAt(commentId);
		} catch (SQLException | NullPointerException e) {
			model.addAttribute("msg", "댓글 삭제에 실패했습니다.");
			model.addAttribute("url", "/view.do?pageIndex="+page+"&bbsId="+bbsId+"&searchType="+searchType+"&searchKeyword="+searchKeyword);
			
			return view;
		}
		
		return view;
	}
	
	@RequestMapping(value="/commentUpdate.do")
	public ModelAndView commentUpdate(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
		ModelAndView view = new ModelAndView();
		
		String bbsId = StringUtil.nullToEmptyString(request.getParameter("bbsId"));
		String page = StringUtil.nullToEmptyString(request.getParameter("pageIndex"),"1");
		String searchType = StringUtil.nullToEmptyString(request.getParameter("searchType"),"all");
		String searchKeyword = StringUtil.nullToEmptyString(request.getParameter("searchKeyword"),"");
		
		Map<String, String> param = new HashMap<>();
		param.put("commentId",StringUtil.nullToEmptyString(request.getParameter("commentId")));
		param.put("contents",StringUtil.nullToEmptyString(request.getParameter("commentCon")));
		
		view.setViewName("redirect:/view.do?pageIndex="+page+"&bbsId="+bbsId+"&searchType="+searchType+"&searchKeyword="+searchKeyword);
		
		try {
			mainService.updateComment(param);
		} catch (SQLException | NullPointerException e) {
			model.addAttribute("msg", "댓글 수정에 실패했습니다.");
			model.addAttribute("url", "/view.do?pageIndex="+page+"&bbsId="+bbsId+"&searchType="+searchType+"&searchKeyword="+searchKeyword);
			
			return view;
		}
		
		return view;
	}
	
	@RequestMapping(value="/updateLikeCnt.do")
	public String updateLikeCnt(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
		ModelAndView view = new ModelAndView();
		
		String ssoId = loginCheck(view, request);
		
		Map<String, String> param = new HashMap<>();
		param.put("bbsId", StringUtil.nullToEmptyString(request.getParameter("bbsId")));
		param.put("userId", ssoId);
		
		int count = mainService.selectChkKabLike(param);
		
		if(count > 0) {
			mainService.deleteKabLikeOne(param);
		}else {
			mainService.insertKabLike(param);
		}
		
		return "jsonView";
	}
} 
