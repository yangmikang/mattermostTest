package kr.go.distep.calendar.web;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.go.distep.calendar.service.CalendarService;
import kr.go.distep.calendar.vo.CalendarFileVO;
import kr.go.distep.calendar.vo.CalendarVO;
import kr.go.distep.util.ArticlePage;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@Controller
public class CalendarController {
	@Resource(name = "calendarService")
	private CalendarService calendarService;

	private final String uploadDir = "C:/upload/calendar/"; // 서버에 맞게 수정하세요

	@RequestMapping(value = "/calendar.do", method = RequestMethod.GET)
	public String calendarPage() {
	    return "calendar/calendar";
	}
	
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String calendarList(Model model) throws Exception {
		List<CalendarVO> calendarList = calendarService.getCalendarList();
		model.addAttribute("calendarList", calendarList);
		return "calendar/calendarList";
	}

	@RequestMapping(value = "/detail/{id}", method = RequestMethod.GET)
	public String calendarDetail(@PathVariable("id") int id, Model model) throws Exception {
		CalendarVO calendar = calendarService.getCalendar(id);
		model.addAttribute("calendar", calendar);
		return "calendar/calendarDetail";
	}

	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String calendarRegisterForm() {
		return "calendar/calendarRegister";
	}

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String calendarRegister(CalendarVO calendar, @RequestParam("files") List<MultipartFile> files)
			throws Exception {

		if (files != null && !files.isEmpty()) {
			for (MultipartFile multipartFile : files) {
				if (!multipartFile.isEmpty()) {
					String originalFileName = multipartFile.getOriginalFilename();
					String uuid = UUID.randomUUID().toString();
					String saveFileName = uuid + "_" + originalFileName;

					File destFile = new File(uploadDir + saveFileName);
					destFile.getParentFile().mkdirs(); // 폴더 없으면 생성
					multipartFile.transferTo(destFile);

					CalendarFileVO fileVO = new CalendarFileVO();
					fileVO.setFileName(originalFileName);
					fileVO.setFileSize((int) multipartFile.getSize());
					fileVO.setFilePath(uploadDir + saveFileName);

					calendar.getFileList().add(fileVO);
				}
			}
		}

		calendarService.registerCalendar(calendar);
		return "redirect:/calendar/list";
	}

	@RequestMapping(value = "/modify/{id}", method = RequestMethod.GET)
	public String calendarModifyForm(@PathVariable("id") int id, Model model) throws Exception {
		CalendarVO calendar = calendarService.getCalendar(id);
		model.addAttribute("calendar", calendar);
		return "calendar/calendarModify";
	}

	@RequestMapping(value = "/modify", method = RequestMethod.POST)
	public String calendarModify(CalendarVO calendar, @RequestParam("files") List<MultipartFile> files)
			throws Exception {

		if (files != null && !files.isEmpty()) {
			for (MultipartFile multipartFile : files) {
				if (!multipartFile.isEmpty()) {
					String originalFileName = multipartFile.getOriginalFilename();
					String uuid = UUID.randomUUID().toString();
					String saveFileName = uuid + "_" + originalFileName;

					File destFile = new File(uploadDir + saveFileName);
					destFile.getParentFile().mkdirs();
					multipartFile.transferTo(destFile);

					CalendarFileVO fileVO = new CalendarFileVO();
					fileVO.setFileName(originalFileName);
					fileVO.setFileSize((int) multipartFile.getSize());
					fileVO.setFilePath(uploadDir + saveFileName);

					calendar.getFileList().add(fileVO);
				}
			}
		}

		calendarService.modifyCalendar(calendar);
		return "redirect:/calendar/list";
	}

	@RequestMapping(value = "/remove/{id}", method = RequestMethod.POST)
	public String calendarRemove(@PathVariable("id") int id) throws Exception {
		calendarService.removeCalendar(id);
		return "redirect:/calendar/list";
	}
	
	
	@RequestMapping(value = "/calendar/register.do", method = RequestMethod.POST)
	@ResponseBody
	public CalendarVO calendarAjaxRegister(@RequestBody CalendarVO calendar) throws Exception {
	    
		
		if (calendar.getEventTitle() == null || calendar.getStartDatetime() == null || calendar.getEndDatetime() == null) {
	        throw new IllegalArgumentException("필수 항목 누락");
	    }

	    calendarService.registerCalendar(calendar); 
	    return calendar; 
	}

	@RequestMapping(value = "/calendar/events.do", method = RequestMethod.GET)
	@ResponseBody
	public List<Map<String, Object>> getCalendarEvents() throws Exception {
	    List<CalendarVO> list = calendarService.getCalendarList();
	    List<Map<String, Object>> result = new ArrayList<>();
	    int getTotal = this.calendarService.getTotal(new HashMap<>());

	    for (CalendarVO vo : list) {
	        Map<String, Object> map = new HashMap<>(); // ← 여기에 위치해야 함
	        map.put("id", vo.getId());
	        map.put("title", vo.getEventTitle());
	        map.put("start", vo.getStartDatetime());
	        map.put("end", vo.getEndDatetime());
	        map.put("description", vo.getEventDescription());
	        map.put("organizer", vo.getOrganizer());
	        map.put("location", vo.getLocation());
	        map.put("contact", vo.getContact());
	        map.put("eventStatus", vo.getEventStatus());
	        map.put("getTotal", getTotal);
	        result.add(map);
	    }

	    return result;
	}
	@ResponseBody
	@RequestMapping(value = "/calendar/listAjax.do", method = RequestMethod.POST)
	public ArticlePage<CalendarVO> listAjax(@RequestBody Map<String, Object> map) {
		int getTotal = this.calendarService.getTotal(map);
		int currentPage = 1;
		if (map.get("currentPage") != null) {
			currentPage = Integer.parseInt(map.get("currentPage").toString());
		}
		map.put("currentPage", currentPage);
		
		List<CalendarVO> VOList = this.calendarService.list(map);
		
		ArticlePage<CalendarVO> articlePage = new ArticlePage<CalendarVO>(getTotal, currentPage, 2, VOList,null,"ajax");
		return articlePage;
	}
	
	@RequestMapping(value = "/calendar/updateTitle.do", method = RequestMethod.POST)
	@ResponseBody
	public String updateTitle(@RequestBody CalendarVO vo) {
		int result = calendarService.updateTitle(vo);
	    return result > 0 ? "success" : "fail";
	}
	
	@RequestMapping(value = "/calendar/updateDate.do" , method = RequestMethod.POST)
	@ResponseBody 
	public String updateDate(@RequestBody CalendarVO vo) { 
		int result =calendarService.updateDates(vo); // vo.id, vo.startDatetime, vo.endDatetime
		return result > 0 ? "success" : "fail"; 
	 }
	 



	
//	@RequestMapping(value = "/download/{fileId}", method = RequestMethod.GET)
//    public void fileDownload(@PathVariable("fileId") int fileId, HttpServletResponse response) throws Exception {
//
//        // 파일 정보 조회 (mapper에서 fileId로 조회하는 메서드 필요)
//        CalendarFileVO fileVO = calendarService.getCalendarFileById(fileId);
//
//        if (fileVO == null) {
//            response.sendError(HttpServletResponse.SC_NOT_FOUND);
//            return;
//        }
//
//        File file = new File(fileVO.getFilePath());
//        if (!file.exists()) {
//            response.sendError(HttpServletResponse.SC_NOT_FOUND);
//            return;
//        }
//
//        String encodedFileName = URLEncoder.encode(fileVO.getFileName(), "UTF-8").replaceAll("\\+", "%20");
//
//        response.setContentType("application/octet-stream");
//        response.setContentLength((int) file.length());
//        response.setHeader("Content-Disposition", "attachment; filename=\"" + encodedFileName + "\";");
//
//        try (FileInputStream fis = new FileInputStream(file); 
//             OutputStream os = response.getOutputStream()) {
//
//            byte[] buffer = new byte[4096];
//            int bytesRead = 0;
//
//            while ((bytesRead = fis.read(buffer)) != -1) {
//                os.write(buffer, 0, bytesRead);
//            }
//            os.flush();
//        }
//    }
}
