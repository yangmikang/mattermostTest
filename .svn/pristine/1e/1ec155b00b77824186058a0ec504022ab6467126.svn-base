package kr.go.distep.calendar.web;

import java.beans.PropertyEditorSupport;
import java.io.File;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.go.distep.calendar.service.CalendarService;
import kr.go.distep.calendar.vo.CalendarFileVO;
import kr.go.distep.calendar.vo.CalendarVO;
import kr.go.distep.cmmn.file.vo.FileGroupVO;
import kr.go.distep.main.service.UploadService;
import kr.go.distep.user.service.UserService;
import kr.go.distep.user.vo.UserVO;
import kr.go.distep.util.ArticlePage;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@Controller
public class CalendarController {
	
	@Autowired
	private UserService userService; 
	
	@Autowired
    UploadService uploadService;
	    
	@Resource(name = "calendarService")
	private CalendarService calendarService;

	private final String uploadDir = "C:/upload/calendar/"; // 서버에 맞게 수정하세요

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String calendarList(Model model) throws Exception {
		List<CalendarVO> calendarList = calendarService.getCalendarList();
		model.addAttribute("calendarList", calendarList);
		return "calendar/calendarList";
	}

	
	
	@RequestMapping(value="/calendar.do",method = RequestMethod.GET)
	public String autt(   HttpSession session,
			RedirectAttributes redirectAttributes,HttpServletRequest request,Model model) {
		
		
		UserVO user = (UserVO) session.getAttribute("loggedInUser");
		
		
		String masterCode = "E01";
		String userType = "N"; 
        String userYn = "N";   
        String fileuserYn = "N";   
        String apprYn = "";
        
        if (user != null) {
            apprYn = user.getAppr_yn();
            HashMap<String, String> param = new HashMap<>();
             
             if(apprYn.equals("Y")) {
             	userType = user.getRole();
             } else {
             	userType = "G";
             }
            
             param.put("userType", userType);
             param.put("boardMasterCode", masterCode);
             userYn = calendarService.getBoarUpdateAuth(param);
            fileuserYn = calendarService.getBoarFileAuth(param);
        }

		
        model.addAttribute("fileuserYn", fileuserYn);
		model.addAttribute("userYn", userYn);
		model.addAttribute("userType", userType);
		
		return  "calendar/calendar";
		
	}
	
	@RequestMapping(value="/calendarCreate.do",method = RequestMethod.GET)
	public String calendarCreate(   HttpSession session,
		    RedirectAttributes redirectAttributes,HttpServletRequest request,Model model) {
		
		
			UserVO user = (UserVO) session.getAttribute("loggedInUser");
			
			
			String masterCode = "E01";
			
			String userType = user.getRole();
			
		    HashMap<String, String> param = new HashMap<>();
		    
		    
		    param.put("userType",userType);
		    param.put("boardMasterCode",masterCode);
		    
	       String userYn = calendarService.getBoarUpdateAuth(param);
	       
	   	model.addAttribute("userYn", userYn);
	       
		return  "calendar/calendarCreate";
	        
       }
       

		
		
		
	@RequestMapping(value = "/calendar/detail.do", method = RequestMethod.GET)
	public String detail( CalendarVO calendar, Model model, HttpSession session,
		    RedirectAttributes redirectAttributes,HttpServletRequest request) {
		calendar = calendarService.detail(calendar); // board 테이블에서 조회됨

	    log.info(">> fileGroupNo: {}", calendar.getFileGroupNo()); // 디버깅용
	    if (calendar.getFileGroupNo() > 0) {
	        FileGroupVO fileGroupVO = uploadService.getFileGroupWithDetails(calendar.getFileGroupNo());
	        calendar.setFileGroupVO(fileGroupVO);
	        log.info("fileDetailVOList: {}", fileGroupVO.getFileDetailVOList());
	    }
		UserVO user = (UserVO) session.getAttribute("loggedInUser");
			
			
			String masterCode = "E01";
			String userType = "N"; 
	        String userYn = "N";   
	        String fileuserYn = "N";   
	        
	        if (user != null) {
	            userType = user.getRole();
	
	            HashMap<String, String> param = new HashMap<>();
	            param.put("userType", userType);
	            param.put("boardMasterCode", masterCode);
	             userYn = calendarService.getBoarUpdateAuth(param);
	    		
	            fileuserYn = calendarService.getBoarFileAuth(param);
	        }
	
			
	        model.addAttribute("fileuserYn", fileuserYn);
			model.addAttribute("userYn", userYn);
			model.addAttribute("userType", userType);
		    log.info("calendar체킁" +calendar );
	    
	    model.addAttribute("calendar", calendar);
	    return "calendar/calendarDetail";
	}


	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String calendarRegisterForm() {
		return "calendar/calendarRegister";
	}

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String calendarRegister(CalendarVO calendar, @RequestParam("files") List<MultipartFile> files)
			throws Exception {
		
		if (files != null && !files.isEmpty()) {
			for (MultipartFile multipartFile : files) {
				if (!multipartFile.isEmpty()) {
					String originalFileName = multipartFile.getOriginalFilename();
					String uuid = UUID.randomUUID().toString();
					String saveFileName = uuid + "_" + originalFileName;

					File destFile = new File(uploadDir + saveFileName);
					destFile.getParentFile().mkdirs(); // 폴더 없으면 생성
					multipartFile.transferTo(destFile);

					CalendarFileVO fileVO = new CalendarFileVO();
					fileVO.setFileName(originalFileName);
					fileVO.setFileSize((int) multipartFile.getSize());
					fileVO.setFilePath(uploadDir + saveFileName);

					calendar.getFileList().add(fileVO);
				}
			}
		}

		calendarService.registerCalendar(calendar);
		return "redirect:/calendar/list";
	}

	@RequestMapping(value = "/modify/{id}", method = RequestMethod.GET)
	public String calendarModifyForm(@PathVariable("id") int id, Model model) throws Exception {
		CalendarVO calendar = calendarService.getCalendar(id);
		model.addAttribute("calendar", calendar);
		return "calendar/calendarModify";
	}

	@RequestMapping(value = "/modify.do", method = RequestMethod.POST)
	public String calendarModify(CalendarVO calendar,
	                             @RequestParam(value = "uploadFiles", required = false) MultipartFile[] uploadFiles,
	                             @RequestParam(value = "thumbnailFile", required = false) MultipartFile thumbnailFile,
	                             @RequestParam(value = "deletedFileIds", required = false) String deletedFileIds)
	        throws Exception {

	    calendar.setUploadFiles(uploadFiles);
	    calendar.setThumbnailFile(thumbnailFile); // 썸네일 세팅
	    calendar.setDeletedFileIds(deletedFileIds);

	    int result = calendarService.modifyCalendar(calendar);

	    return "redirect:/calendar.do";
	}

	
		@RequestMapping(value="/calendar/delete.do",method = RequestMethod.POST)
		public String deleteCm(CalendarVO calendar) throws Exception {
			
			int result =this.calendarService.removeCalendar(calendar);
			log.info("resutl " + result);
			return "redirect:/calendar.do";
			
			
		}

		@RequestMapping(value = "/calendar/register.do", method = RequestMethod.POST, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
		@ResponseBody
		public Map<String, Object> calendarAjaxRegister(
		        @ModelAttribute CalendarVO calendar,
		        @RequestParam(value = "uploadFiles", required = false) MultipartFile[] uploadFiles,
		        @RequestParam(value = "thumbnailFile", required = false) MultipartFile thumbnailFile,
		        HttpSession session) throws Exception {

		    Map<String, Object> result = new HashMap<>();

		    // 로그인 체크
		    UserVO user = (UserVO) session.getAttribute("loggedInUser");
		    if (user == null || user.getId() == null || user.getId().trim().isEmpty()) {
		        result.put("success", false);
		        result.put("message", "로그인 후 이용 가능합니다.");
		        result.put("redirectUrl", "/login.do");
		        return result;
		    }

		    // 상태 계산
		    Date startDate = calendar.getStartDatetime();
		    Date endDate = calendar.getEndDatetime();
		    LocalDate today = LocalDate.now();

		    if (startDate != null && endDate != null) {
		        LocalDate startDay = startDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
		        LocalDate endDay = endDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

		        if (startDay.isAfter(today)) {
		            calendar.setEventStatus("UPCOMING");
		        } else if ((startDay.isEqual(today) || startDay.isBefore(today)) && endDay.isAfter(today)) {
		            calendar.setEventStatus("ONGOING");
		        } else {
		            calendar.setEventStatus("COMPLETED");
		        }
		    }

		    calendar.setUserId(user.getId());
		    calendar.setUploadFiles(uploadFiles);
		    calendar.setThumbnailFile(thumbnailFile);

		    // 저장 처리
		    calendarService.registerCalendar(calendar);

		    result.put("success", true);
		    result.put("redirectUrl", "/calendar.do");
		    return result;
		}

		/*
		 * calendarService.registerCalendar(calendar);
		 * 
		 * return "redirect:/calendar/list"; }
		 */

		@RequestMapping(value = "/calendar/events.do", method = RequestMethod.GET)
		@ResponseBody
		public List<Map<String, Object>> getCalendarEvents() throws Exception {
		    List<CalendarVO> list = calendarService.getCalendarList();
		    List<Map<String, Object>> result = new ArrayList<>();
		    int getTotal = this.calendarService.getTotal(new HashMap<>());

		    LocalDate today = LocalDate.now(ZoneId.systemDefault());
		    LocalDate tomorrow = today.plusDays(1);

		    for (CalendarVO vo : list) {
		        Map<String, Object> map = new HashMap<>();
		       
		        // 날짜 변환
		        LocalDate start = vo.getStartDatetime().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
		        LocalDate end = vo.getEndDatetime().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

		        // 상태 계산 내일까진 UPCOMING으로 간주
		        String eventStatus;
		        if (start.isAfter(today)) {
		            eventStatus = "UPCOMING";
		        } else if (start.isEqual(today)) {
		            eventStatus = "ONGOING";
		        } else if (start.isBefore(today) && !end.isBefore(today)) {
		            eventStatus = "ONGOING";
		        } else {
		            eventStatus = "COMPLETED"; // ← 여기 변경
		        }

		        if (start.isEqual(tomorrow)) {
		            eventStatus = "UPCOMING";
		        }
		        if (vo.getFileGroupNo() > 0) {
			        FileGroupVO fileGroupVO = uploadService.getFileGroupWithDetails(vo.getFileGroupNo());
			        vo.setFileGroupVO(fileGroupVO);
			        log.info("fileDetailVOList: {}", fileGroupVO.getFileDetailVOList());
			    }
		        

		        map.put("id", vo.getId());
		        map.put("title", vo.getEventTitle());
		        map.put("start", vo.getStartDatetime());
		        map.put("end", vo.getEndDatetime());
		        map.put("description", vo.getEventDescription());
		        map.put("organizer", vo.getOrganizer());
		        map.put("location", vo.getLocation());
		        map.put("contact", vo.getContact());
		        map.put("eventStatus", eventStatus);
		        map.put("getTotal", getTotal);
		        map.put("vo", vo);
		        map.put("externalLink", vo.getExternalLink());
		        

		        result.add(map);
		    }

		    return result;
		}

	@ResponseBody
	@RequestMapping(value = "/calendar/listAjax.do", method = RequestMethod.POST)
	public ArticlePage<CalendarVO> listAjax(@RequestBody Map<String, Object> map) {
		int getTotal = this.calendarService.getTotal(map);
		int currentPage = 1;
		if (map.get("currentPage") != null) {
			currentPage = Integer.parseInt(map.get("currentPage").toString());
		}
		map.put("currentPage", currentPage);

		List<CalendarVO> VOList = this.calendarService.list(map);
		
		for (CalendarVO vo :  VOList) {
			if (vo.getFileGroupNo() > 0) {
				FileGroupVO fileGroupVO = uploadService.getFileGroupWithDetails(vo.getFileGroupNo());
				vo.setFileGroupVO(fileGroupVO);
				map.put("vo",vo);
			}
		}
		
		
		ArticlePage<CalendarVO> articlePage = new ArticlePage<CalendarVO>(getTotal, currentPage, 2, VOList,null,"ajax");
		return articlePage;
	}
	@ResponseBody
	@RequestMapping(value = "/calendar/mainlistAjax.do", method = RequestMethod.POST)
	public List<CalendarVO>  mainlistAjax(@RequestBody Map<String, Object> map) {
		int getTotal = this.calendarService.getTotal(map);
		map.put("getTotal", getTotal);
		
		List<CalendarVO> VOList = this.calendarService.mainlist(map);
		
		return VOList;
	}
	
	@RequestMapping(value = "/calendar/updateTitle.do", method = RequestMethod.POST)
	@ResponseBody
	public String updateTitle(@RequestBody CalendarVO vo) {
		int result = calendarService.updateTitle(vo);
	    return result > 0 ? "success" : "fail";
	}
	
	@RequestMapping(value = "/calendar/updateDate.do" , method = RequestMethod.POST)
	@ResponseBody 
	public String updateDate(@RequestBody CalendarVO vo) { 
		int result =calendarService.updateDates(vo); 
		return result > 0 ? "success" : "fail"; 
	 }
	 

	@InitBinder
	public void initBinder(WebDataBinder binder) {
	    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
	    dateFormat.setLenient(false);
	    binder.registerCustomEditor(java.util.Date.class, new PropertyEditorSupport() {
	        @Override
	        public void setAsText(String text) throws IllegalArgumentException {
	            try {
	                setValue(dateFormat.parse(text));
	            } catch (Exception e) {
	                setValue(null);
	            }
	        }
	    });
}


}
