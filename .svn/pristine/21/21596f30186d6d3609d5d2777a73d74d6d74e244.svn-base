<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<meta name="viewport"
		content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
	<meta name="keywords" content="" />
	<meta name="description" content="" />
	<meta name="format-detection" content="telephone=no" />
	<link rel="apple-touch-icon" sizes="180x180" href="../../resources/img/guide/favicon_180.png">
	<link rel="icon" type="image/png" sizes="512x512" href="../../resources/img/guide/favicon_512.png">
	<link rel="icon" type="image/png" sizes="192x192"  href="../../resources/img/guide/favicon_192.png">
	<link rel="icon" type="image/png" sizes="32x32" href="../../resources/img/guide/favicon_32.png">
	<title>GINI - Global Innopolis Network Initiative</title>
	<link href="../../resources/css/swiper-bundle.min.css" type="text/css" rel="stylesheet" />
	<link href="../../resources/css/pattern_css.css" type="text/css" rel="stylesheet" />
	<link href="../../resources/css/output/p_common.css" type="text/css" rel="stylesheet" />
	<link href="../../resources/css/output/p_content.css" type="text/css" rel="stylesheet" />
	<link href="../../resources/css/output/p_layout.css" type="text/css" rel="stylesheet" />
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
	 <link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.css' rel='stylesheet' />
	<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js'></script>
	<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/locales/ko.global.min.js"></script>

<title>Insert title here</title>
</head>
<style>
.flag-icon::before,
.organizer-daejeon::before,
.organizer-dortmund::before,
.organizer-gini::before,
.organizer-malaga::before,
.organizer-montgomery::before,
.organizer-seattle::before,
.organizer-quebec::before,
.gini::before,
.organizer-default::before {
  content: "";
  display: inline-block;
  width: 28px;
  height: 28px;
  margin-right: 3px;
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center;
}

.form-conts{
	width: 100%;

}
.organizer-daejeon::before    { 

	background-image: url('../../img/component/common/ico_korea.svg'); 

}
.organizer-gini::before    { 

	 background-image: url('../../img/component/common/ginilogo.png'); 

}
.organizer-dortmund::before    {
		 background-image: url('../../img/component/common/ico_germany.svg');
}
.organizer-malaga::before      { background-image: url('../../img/component/common/ico_spain.svg'); }
.organizer-montgomery::before  {

 background-image: url('../../img/component/common/ico_usa.svg'); 
}
.organizer-seattle::before     { background-image: url('../../img/component/common/ico_usa.svg'); }
.organizer-quebec::before      { background-image: url('../../img/component/common/ico_canada.svg'); }
.gini::before                  { background-image: url('../../img/component/common/ginilogo.png'); }
.organizer-default::before     { background-image: url('../../img/component/common/ico_default.svg'); }

.organizer-s{
width: 100%;

}
</style>
<body>
<div id="wrap">
		<!-- 본문 바로가기 영역 -->
		<!-- //본문 바로가기 영역 -->
		<!-- 상단 배너영역 -->
		<!-- //상단 배너영역 -->

		<!-- 헤더 영역 -->
				<!-- //헤더 상단 기타메뉴 -->
			<!-- //헤더 컨텐츠 영역  -->
			
			<!-- 모바일 : 전체메뉴 -->
		<!-- //헤더 영역 -->

		<!-- 컨테이너 영역 -->
		<div id="container">
		
					<!-- breadcrumb -->
			<div class="page-title-wrap visual img-members">
				<div class="visual-filter"></div>
				<div class="inner">
					<!-- breadcrumb -->
					<nav class="breadcrumb-wrap" aria-label="브레드크럼">
						<ol class="breadcrumb">
							<li class="home"><a href="${pageContext.request.contextPath}/index.do" class="txt">Home</a></li>
							<li><a href="${pageContext.request.contextPath}/calendar.do" class="txt">Programs</a></li>
							<li><a href="${pageContext.request.contextPath}/calendar.do" class="txt">Events</a></li> 
							<li><a href="${pageContext.request.contextPath}/calendar/detail.do?id=${calendar.id}" class="txt">Schedule Management</a></li> 
						</ol>
					</nav>
					<!-- breadcrumb -->
					<div class="visual-area">
						<h2 class="h-tit">Schedule Management</h2>
						<p>Schedule Management</p>
					</div>
				</div>
			</div>
		<form class="form-horizontal" id="form" action="/contract/create"
			method="post" enctype="multipart/form-data">
			<input type="hidden" id="getId" name="id" value="${calendar.id}">
			<input type="hidden" id="fileGroupNo" name="fileGroupNo" value="${calendar.fileGroupNo}" />
	
			<!-- 컨텐츠 영역 -->
			<div class="inner">
				<!-- 페이지 타이틀 영역 -->
				<!-- //페이지 타이틀 영역 -->
				<!-- 상세보기 영역 -->
				<div class="conts-area">
					<div class="conts-detail-wrap txt-box bg-white">
						<!-- real contents -->
						<div class="conts-wrap scroll-check">
							<div class="conts-wrap section-link" id="section_01">
								<h3 class="sec-tit view-section">${calendar.eventTitle}</h3>
								</h3>
								<!-- table list -->
								<div class="tbl-wrap">
									<dl class="tbl def-list">
										<dt class="Bdtitle update-section" style="display: none;">Event Title</dt>
										<dd class="Bdtitle update-section" style="display: none;">
											<div class="form-conts">
											
												<input type="text" id="consult_name" maxlength="100"
													value="${calendar.eventTitle}" class="form-control update-section"
													autocomplete="on" placeholder="Event Title" name="title">
											</div>
										</dd>
										<!-- <dt>Title</dt>
										<dd><h3 class="sec-tit">제목입력해주세요</h3></dd> -->
										<dt>Organizer</dt>

										<dd style="display: flex;" >
											<div class="flag-icon" data-city-code="${calendar.organizer}" align-items: center;"   onclick="applyFlagIcons()">
											</div>	
											<div class="view-section organizer-s">
												${calendar.organizer}
												
											</div>	
										<div class="form-conts">
										<select class="form-select lg delDis update-section" id="selectOrg" name="organizer" title="선택"  style="display: none;">
										    <option value="">select</option>
										    <option value="GINI" ${calendar.organizer == 'GINI' ? 'selected' : ''}>GINI</option>
										    <option value="City of Daejeon" ${calendar.organizer == 'City of Daejeon' ? 'selected' : ''}>City of Daejeon</option>
										    <option value="City of Dortmund" ${calendar.organizer == 'City of Dortmund' ? 'selected' : ''}>City of Dortmund</option>
										    <option value="City of Malaga" ${calendar.organizer == 'City of Malaga' ? 'selected' : ''}>City of Malaga</option>
										    <option value="County of Montgomery, MD" ${calendar.organizer == 'County of Montgomery, MD' ? 'selected' : ''}>County of Montgomery, MD</option>
										    <option value="City of Seattle" ${calendar.organizer == 'City of Seattle' ? 'selected' : ''}>City of Seattle</option>
										    <option value="Province of Quebec" ${calendar.organizer == 'Province of Quebec' ? 'selected' : ''}>Province of Quebec</option>
										</select>

									</div>
										
										</dd>
										<%-- <dt>Author</dt>

										<dd class="flag-icon" style="display: flex; align-items: center;"   onclick="applyFlagIcons()">
											${calendar.username}
										</dd> --%>
										<dt>Start Date</dt>
										<dd>
											<div class="view-section">
												<fmt:formatDate value="${calendar.startDatetime}" pattern="yyyy-MM-dd'T'HH:mm" var="formattedStart" />
												${formattedStart}
											</div>
											<div class="datepicker-input update-section" style="display: none;">
												<input type="text"   class="form-control  datepicker cal delread startdate" value="${formattedStart}"  id="startdate" placeholder="Select date" id="cal">
											</div>
										
										</dd>
										<dt>End Date</dt>
										<dd>
										<div class="form-conts form-row">
										<div class="form-conts datepicker-conts">
											<div class="datepicker-input">
												<div class="view-section">
													<fmt:formatDate value="${calendar.endDatetime}" pattern="yyyy-MM-dd'T'HH:mm" var="endDatetime"/>
													${endDatetime}
												</div>
												<input type="text"  style="display: none;"   class="form-control update-section  datepicker delread cal enddate" value="${endDatetime}" id="enddate"  placeholder="Select date" id="cal">
											</div>
										</div>
									</div>
										
										</dd>
										<dt>Description</dt>
										<dd>
											<span class="Recont view-section">${calendar.eventDescription}</span>
											<div class="form-conts update-section" id="content" style="display: none;">
												<textarea rows="10" cols="50" id="description"
													class="updtcon content form-control delread" name="content"
													maxlength="2000" class="form-control" name="content"
													 placeholder="Event Description">${calendar.eventDescription}</textarea>
											</div>
										</dd>
										<dt>External Link</dt>
										<dd>
											  <span class="Recont view-section">
												    <c:choose>
												      <c:when test="${not empty calendar.externalLink}">
												        <a href="${calendar.externalLink}" target="_blank">${calendar.externalLink}</a>
												      </c:when>
												      <c:otherwise>
												       There is no link
												      </c:otherwise>
												    </c:choose>
												  </span>
											<div class="form-conts update-section" id="content" style="display: none;">
												<input type="text" id="link" class="form-control delread" name="externalLink" value="${calendar.externalLink}" placeholder="https://example.com" >
											</div>
										</dd>
<dt class="upload-file">Upload File</dt>
													<dd class="upload-file">
										
					<div class="gini-cont-box">
						<div class="fileCont" >
							<!-- 파일업로드 -->
							<div class="file-upload " ondragover="f_over()"   ondrop="f_drop()" style="display: none;">
								<p class="txt">Please drag and drop the file you wish to attach here, or click the Select File button to select the file directly.</p>
								
							</div>
							<%-- <c:if test="${calendar.fileGroupVO != null}"> --%>

       <c:forEach var="fileDetailVO" items="${calendar.fileGroupVO.fileDetailVOList}">
  <input type="hidden" name="existingFileIds" value="${fileDetailVO.fileSn}" />
</c:forEach>
       
       
        <div class="file-upload-result ">
            <img class="img-fluid imgFileSaveLocate"
                     style="cursor: pointer; display: none;" src="${fileDetailVO.fileSaveLocate}"
                     data-file-original-name="${fileDetailVO.fileOriginalName}"
                     data-file-save-locate="${fileDetailVO.fileSaveLocate}" /> 
               <!--  <button type="button"  class="prev" >미리보기</button> -->
				 				<div class="upload-top">
									<div class="file-total">
									<div>
								
										<span class="current fileCount">
												    <span class="current fileCount">
													  ${calendar.fileGroupVO.fileDetailVOList != null ? calendar.fileGroupVO.fileDetailVOList.size() : 0}
													</span>
										
										</span> / 6</div>
									</div>
					<!-- 	<button type="button" class="btn btn-txt ico-before ico-del sm h-auto " style="display:none;" onclick="deleteAllFiles()">Delete All</button>							 -->	
              		 	 <button type="button" class="down allDown" onclick="fn_dwMulti()">Full Download</button>
					
										
										
								</div>
								
								<ul class="upload-list" id="">
								    <div class="row fileContSel" style="display: none;">
												<!-- 파일업로드 -->
												<div class="file-upload cont50" ondragover="f_over()"   ondrop="f_drop()">
													<p class="txt">Please drag and drop the file you wish to attach here, or click the Select File button to select the file directly.</p>
													<button type="button" class="btn primary ico-before ico-upload md" onclick="document.getElementById('uploadFiles').click()">Select file</button>
											
												</div>
												<!-- //파일업로드 -->
												<!-- 파일업로드 -->
												<div class="file-upload-result cont50">
													<div class="upload-top">
													</div>
													<div class="upload-delete-btn">
													</div>
												</div>
												<!-- //파일업로드 리스트 -->
												<!-- //폼그룹 -->
											</div>
													<ul class="upload-list" id="fileListArea">
							    <c:forEach var="fileDetailVO" items="${calendar.fileGroupVO.fileDetailVOList}" varStatus="stat">
										  <li>
										    <div class="in">
										      <div class="file-name" onclick="fn_dw(this)" class="imgFileSaveLocate" style="cursor: pointer;"  id="${fileDetailVO.fileSaveLocate}"
							                     data-file-original-name="${fileDetailVO.fileOriginalName}"
							                     data-file-save-locate="${fileDetailVO.fileSaveLocate}">
										        ${fileDetailVO.fileOriginalName}
										        [${fileDetailVO.fileMime}, ${fileDetailVO.fileFancySize}]
										      </div>
										      <div class="file-btn">
										       <button type="button" class="btn btn-txt ico-before ico-del sm h-auto"
              style="display:none;"
              onclick="this.closest('li').remove(); deletedFileIds.push('${fileDetailVO.fileSn}'); updateFileCount();">
        Delete
      </button>
										        <!-- <button type="button" class="btn btn-txt ico-before ico-del sm h-auto"  style="display: none;" onclick="this.closest('li').remove(); updateFileCount();">삭제</button>
										     -->  </div>
										    </div>
										  </li>
						
						    </c:forEach>
								</ul>
							<input type="file" name="uploadFiles" style="display: none;" multiple id="uploadFiles"style="display:none;" onchange="handleFileUpload(event)" />
								<div class="upload-delete-btn" style="
    display: flex;
    justify-content: space-evenly;
    align-items: center;
">
									 
							 	</div>
							</div>
       
					<%-- 	</c:if> --%>
							<!-- //파일업로드 -->
							<!-- 파일업로드 -->
							
							<!-- //파일업로드 리스트 -->
						</div>
								</div>

							</div>
						<div class="page-btn-wrap both" >
							<div>
							      <!-- Other / Unknown -->
								<button type="button" class="btn primary" onclick="location.href='${pageContext.request.contextPath}/calendar.do'">Go to list</button>
							</div>
							<div id="userBtn" style="display:none;">
							<button type="button" class="btn primary Modify" onclick="UpdatEvent()">Modify </button>
							<button type="button" class="btn primary Submit" style="display: none;" onclick="updateSub()">Submit </button>
							<button type="button" class="btn primary" onclick="Deletevent()">Delete </button>
							</div>
						</div>
						</div>


						</dl>
</div>
				 </div>
				 </div>
						<!-- //real contents -->

						<input type="hidden" name="boardMasterCode" id="boardMasterCode"
							value="${boardVo.boardMasterCode}" /> <input type="hidden"
							name="" id="" value="${boardVo.userId}" />

					</div>
					
<%-- <dd>${fileuserYn} :::::::::::: ${userType}</dd> --%>
					<!-- //상세보기 영역 -->
				</div>
				<!-- //컨테이너 영역 -->
			</div>
		</form>
	
	<c:if test="${ sessionScope.loggedInUser.id eq calendar.userId or userType eq 'A'}">
		<script type="text/javascript">
			let userBtn = document.querySelector("#userBtn")
			userBtn.style.display = 'block'
		</script>
	</c:if>
	<c:set var="generalCount" value="0" />
	<c:forEach var="file" items="${calendar.fileGroupVO.fileDetailVOList}">
	    <c:if test="${file.fileType == 'GENERAL'}">
	        <c:set var="generalCount" value="${generalCount + 1}" />
	    </c:if>
	</c:forEach>
	<!-- //레이어 : 검색필터 -->

	<!-- 스크립트 : 라이브러리 -->
	<script src="../../resources/js/pattern/jquery.min.js"></script>

	<!-- 스크립트 : 패턴 페이지 -->
	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
	<script src="../../resources/js/pattern/ui-pattern-script.js"></script>
	

	<!-- 스크립트 : 컴포넌트 -->
	<script src="../../resources/js/component/ui-script.js"></script>
	
	<!-- 스크립트 : input date  -->
	<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
flatpickr(".startdate", {
	  enableTime: true,
	  dateFormat: "Y-m-d\\TH:i",
	  time_24hr: false
	});

	flatpickr(".enddate", {
	  enableTime: true,
	  dateFormat: "Y-m-d\\TH:i",
	  locale: "en",
	  time_24hr: false
	});


</script>
<script>
document.addEventListener("DOMContentLoaded", function () {
    const generalFileCount = '${generalCount}';
    function uploadFile() {
        const uploadFields = document.querySelectorAll(".upload-file");
        if (generalFileCount <= 0) {
            uploadFields.forEach(el => el.style.display = "none");
        } else {
            uploadFields.forEach(el => el.style.display = "");
        }
    }

    uploadFile(); 
});


function applyFlagIcons() {
	  document.querySelectorAll(".flag-icon").forEach(function(el) {
	    const cityCode = el.getAttribute("data-city-code"); // ← el로부터 꺼냄
	    const iconClass = getFlagIcon(cityCode);
	    el.classList.add(iconClass);
	  });
	}

	function getFlagIcon(cityCode) {
		  let organizerClass = "";
		  switch (cityCode) {
		    case "GINI": organizerClass = "organizer-gini"; break;
		    case "City of Daejeon": organizerClass = "organizer-daejeon"; break;
		    case "City of Dortmund": organizerClass = "organizer-dortmund"; break;
		    case "City of Malaga": organizerClass = "organizer-malaga"; break;
		    case "County of Montgomery, MD": organizerClass = "organizer-montgomery"; break;
		    case "City of Seattle": organizerClass = "organizer-seattle"; break;
		    case "Province of Quebec": organizerClass = "organizer-quebec"; break;
		    default: organizerClass = "organizer-default"; break;
		  }
		  return organizerClass; 
	}

	document.addEventListener("DOMContentLoaded", applyFlagIcons);



const contextPath = '${pageContext.request.contextPath}';
const fileList = [
  <c:forEach var="fileDetailVO" items="${calendar.fileGroupVO.fileDetailVOList}" varStatus="stat">
    {
      name: "${fileDetailVO.fileOriginalName}",
      path: "${fileDetailVO.fileSaveLocate}"
    }<c:if test="${!stat.last}">,</c:if>
  </c:forEach>
];
function citiText(){
	 
	const citySelect = document.getElementById("selectOrg");
	
	
	const cityValue = citySelect.value;
	const cityText = citySelect.options[citySelect.selectedIndex].text;
	const description =  document.getElementById("description").value;
	
	console.log("cityText",cityText)
	 
 }
	  let uploadedFiles = [];
	  let deletedFileIds = [];

	  function UpdatEvent() {
	    document.querySelectorAll(".delread").forEach(el => el.removeAttribute("readonly"));
	    document.querySelectorAll(".delread").forEach(el => el.removeAttribute("disabled"));
	    document.querySelectorAll(".delDis").forEach(el => el.removeAttribute("disabled"));
	    document.querySelectorAll(".ico-del").forEach(el => el.style.display = "inline-block");
	    document.querySelectorAll(".view-section").forEach(el => el.style.display = "none");
	    document.querySelectorAll(".update-section").forEach(el => el.style.display = "block");
	    document.querySelector(".Modify").style.display = "none";
	    document.querySelector(".flag-icon").style.display = "none";
	    document.querySelector(".allDown").style.display = "none";
	    document.querySelector(".fileContSel").style.display = "block";
	    document.querySelector(".Submit").style.display = "inline-block";
	    document.querySelectorAll(".upload-file").forEach(function (el) {
            el.style.display = "block"; // 오타 수정
            })
	  }


	function deleteSingleFile(index, button, fileId) {
	  if (fileId) {
	    deletedFileIds.push(fileId); // 기존 파일일 경우 ID 저장
	  } else {
	    uploadedFiles.splice(index, 1); // 새로 올린 파일은 배열에서 제거
	  }
	  button.closest('li').remove();
	  updateFileCount();
	}


	function updateFileCount() {
		  const countSpan = document.querySelector('.file-total .current');
		  const allFileInputs = document.querySelectorAll('input[name="existingFileIds"]');
		  
		  let validExistingCount = 0;
		  allFileInputs.forEach(input => {
		    if (!deletedFileIds.includes(input.value)) {
		      validExistingCount++;
		    }
		  });

		  const totalCount = validExistingCount + uploadedFiles.length;
		  countSpan.textContent = `\${totalCount}`;
		}


	  function deleteAllFiles() {
	   /*  uploadedFiles = [];
	    const fileListArea = document.getElementById('fileListArea');
	    fileListArea.innerHTML = '';
	    updateFileCount(); */
	    
	    const existingFileInputs = document.querySelectorAll('input[name="existingFileIds"]');
		  const newFileItems = uploadedFiles.length;
		
		  if (existingFileInputs.length === 0 && newFileItems === 0) {
		    alert("There are no files to delete.");
		    return;
		  }
		
		  // 기존 파일 삭제 처리
		  existingFileInputs.forEach(input => {
		    const fileId = Number(input.value);
		    deletedFileIds.push(fileId);
		    input.remove(); // hidden input 제거
		  });
		
		  // 새로 업로드한 파일 초기화
		  uploadedFiles = [];
		
		  // UI에서 리스트 제거
		  const fileListArea = document.getElementById('fileListArea');
		  fileListArea.innerHTML = '';
		
		  updateFileCount();
	  }


  function formatBytes(bytes) {
    if (bytes === 0) return '0KB';
    const k = 1024;
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    const size = parseFloat((bytes / Math.pow(k, i)).toFixed(1));
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    return `\${size} \${sizes[i]}`;
  }



  function handleFileUpload(event) {
    const files = event.target.files;
    const fileListArea = document.getElementById('fileListArea');
    const allowedExtensions = [
  	  'pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt',
  	  'jpg', 'jpeg', 'png', 'gif', 'zip', 'hwp'
  	];
    const existingCount = document.querySelectorAll('input[name="existingFileIds"]').length; 
    const validExistingCount = existingCount - deletedFileIds.length;
    for (let i = 0; i < files.length; i++) {
    	
      const file = files[i];
      const extension = file.name.split('.').pop().toLowerCase();

      
      if (!allowedExtensions.includes(extension)) {
          const li = document.createElement('li');
          li.classList.add('is-error');
          li.innerHTML = `
            <div class="in">
        	  <div class="file-name">\${file.name} [\${file.name.split('.').pop()}, \${formatBytes(file.size)}]</div>
                  <div class="file-btn">
                <span class="ico-invalid error"><em class="sr-only">error</em></span>
                <button type="button" class="btn btn-txt ico-before ico-del sm h-auto" onclick="this.closest('li').remove(); updateFileCount();">Delete</button>
              </div>
            </div>
            <p class="file-hint">Only the following file types can be uploaded:<br>
            pdf, doc, docx, xls, xlsx, ppt, pptx, txt, jpg, jpeg, png, gif, zip, hwp</p>
          `;
          fileListArea.appendChild(li);
          continue;
        }

      if (file.size > 20 * 1024 * 1024) {
        const li = document.createElement('li');
        li.classList.add('is-error');
        li.innerHTML = `
          <div class="in">
            <div class="file-name">\${file.name} [\${file.name.split('.').pop()}, \${formatBytes(file.size)}]</div>
            <div class="file-btn">
              <span class="ico-invalid error"><em class="sr-only">error</em></span>
              <button type="button" class="btn btn-txt ico-before ico-del sm h-auto" onclick="deleteSingleFile(${uploadedFiles.length - 1}, this)">Delete</button>
            </div>
          </div>
          <p class="file-hint">The file size that can be registered has been exceeded.<br>Only files less than 20MB can be registered.</p>
        `;
        fileListArea.appendChild(li);
        continue;
      }
      const totalCount = validExistingCount + uploadedFiles.length;
      if (totalCount >= 6) {
        alert("You can register up to 6 files including existing files.");
        break;
      }

      uploadedFiles.push(file);


      const li = document.createElement('li');
      li.innerHTML = `
        <div class="in">
          <div class="file-name">\${file.name} [\${file.name.split('.').pop()}, \${formatBytes(file.size)}]</div>
          <div class="file-btn">
          <button type="button" class="btn btn-txt ico-before ico-del sm h-auto" onclick="deleteSingleFile(${uploadedFiles.length - 1}, this)">Delete</button>
          
          </div>
        </div>
      `;
      fileListArea.appendChild(li);
    }

    updateFileCount();
    event.target.value = '';
  }


	function deleteSingleFile(index, button, fileId) {
	 if (fileId) {
	   deletedFileIds.push(fileId);
	 } else {
	   uploadedFiles.splice(index, 1);
	 }
	 button.closest('li').remove();
	 updateFileCount();
	}
	  function escapeForJs(str) {
		  return str
		    .replace(/\\/g, '\\\\') 
		    .replace(/"/g, '\\"')   
		    .replace(/'/g, "\\'");  
		}

  function updateSub() {
	  const errorItems = document.querySelectorAll('#fileListArea li.is-error');
	  if (errorItems.length > 0) {
	    alert("There are invalid files in the attachment list. Please remove them before submitting.");
	    return;
	  }
	  const content = document.querySelector("#description").value.trim();
	  const title = document.querySelector("#consult_name").value
	  const link = document.getElementById("link").value;

    	if (title === "") {
    	    alert("Please enter a title.");
    	    return false;
    	}
    	if (title.length > 100) {
    	    alert("The title must be no more than 100 characters.");
    	    return false;
    	}
    	if (title.length < 10) {
    	    alert("The title must be at least 10 characters long.");
    	    return false;
    	}

	    if (content === "") {
	        alert("Please enter description.");
	        return false;
	    }
	    if (content.length < 10) {
	        alert("The description must be at least 10 characters.");
	        return false;
	    }
	    if (content.length > 2000) {
	        alert("The description must be no more than 2000 characters.");
	        return false;
	    }
	    const forbiddenPattern = /\\/;
	    
	    if (link) {
		    const urlPattern = /^(https?:\/\/)[^\s/$.?#].[^\s]*$/i;
		    if (!urlPattern.test(link)) {
		      alert("Please enter a valid URL starting with http:// or https://.");
		      document.getElementById("link").focus();
		      return;
		    }
		  }
		  if (link && forbiddenPattern.test(link)) {
			  alert("Backslashes (\\) are not allowed in the External Link.");
			  document.getElementById("link").focus();
			  return;
			}
	    
	  const orgcontent = `${calendar.eventDescription}`.replace(/\r?\n/g, '');
    const currentContent = document.querySelector("#description").value.replace(/\r?\n/g, '');
    const isDescriptionChanged = currentContent !== orgcontent;

	  
	  
	  const isTitleChanged = document.getElementById("consult_name").value !== "${calendar.eventTitle}";
	  const isStartChanged = document.getElementById("startdate").value !== "${formattedStart}";
	  const isEndChanged = document.getElementById("enddate").value !== "${endDatetime}";
	  const isOrganizerChanged = document.getElementById("selectOrg").value !== "${calendar.organizer}";
	  const islinkChanged = document.getElementById("link").value !== "${calendar.externalLink}";
	  const isFileChanged = uploadedFiles.length > 0 || deletedFileIds.length > 0;

	  if (!isTitleChanged && !isStartChanged && !isEndChanged && !isDescriptionChanged && !isOrganizerChanged && !isFileChanged && !islinkChanged) {
	    alert("There is no change to update.");
	    return;
	  }
	  
	  const safeTitle = escapeForJs(title);
	  
	  const description = document.getElementById("description").value;
      const safedescription = escapeForJs(description);
      
    const formData = new FormData();
    
    formData.append("id", document.querySelector("#getId").value);
    formData.append("eventTitle", safeTitle);
    formData.append("startDatetime", document.getElementById("startdate").value);
    formData.append("endDatetime", document.getElementById("enddate").value);
    formData.append("eventDescription", safedescription);
    formData.append("organizer", document.getElementById("selectOrg").value);
    formData.append("externalLink", document.getElementById("link").value);
    if (deletedFileIds.length > 0) {
    	  formData.append("deletedFileIds", deletedFileIds.join(","));
    	}
    console.log("deletedFileIds", deletedFileIds);
    formData.append("fileGroupNo", document.getElementById("fileGroupNo").value); //  추가!

    const fileInput = document.getElementById("uploadFiles");
    console.log(fileInput.files);
 //수정된 부분
    for (let i = 0; i < uploadedFiles.length; i++) {
      formData.append("uploadFiles", uploadedFiles[i]);
    }
    document.querySelectorAll('input[name="existingFileIds"]').forEach(input => {
    	  formData.append("existingFileIds", input.value);
    	});


    axios.post("${pageContext.request.contextPath}/modify.do", formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    })
    .then(response => {
      alert("The schedule has been changed.");
      location.href = "${pageContext.request.contextPath}/calendar.do";
    })
    .catch(error => {
      alert("Fix failed");
    });
  }

  function Deletevent() {
    const form = document.getElementById("form");
    if (confirm("Are you sure you want to delete it?")) {
      form.action = "${pageContext.request.contextPath}/calendar/delete.do";
      form.submit();
    }
  }
  
  function fn_dw(el) {
	//다운로드 버튼 이벤트
	  const target = document.querySelector(".imgFileSaveLocate");
	    console.log("el",el)
	
	  if (target) {
	    const fileSaveLocate = el.dataset.fileSaveLocate;
	    
	    console.log("fileSaveLocate : " + fileSaveLocate);
	    location.href = "${pageContext.request.contextPath}/download.do?fileName=" + encodeURIComponent(fileSaveLocate);
	  } else {
	  }
	    
  }
	    function fn_dwMulti() {
	    	  if (!fileList || fileList.length === 0) {
	    	    alert("No file to download.");
	    	    return;
	    	  }

	    	  if (fileList.length === 1) {
	    	    const file = fileList[0];
	    	    const url = contextPath +
	    	      '/download.do?fileName=' + encodeURIComponent(file.path) +
	    	      '&originalName=' + encodeURIComponent(file.name);
	    	    location.href = url;
	    	  } else {
	    	    const params = fileList.map(function(f) {
	    	      return 'fileNames=' + encodeURIComponent(f.path);
	    	    }).join("&");
	    	    const url = contextPath + '/downloadMulti.do?' + params;
	    	    location.href = url;
	    	  }
	    }

</script>


</body>
</html>