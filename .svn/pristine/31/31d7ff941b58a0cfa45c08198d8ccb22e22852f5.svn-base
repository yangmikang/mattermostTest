package kr.go.distep.cmmn.web;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.ModelAndViewDefiningException;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.initech.eam.nls.CookieManager;
import com.initech.eam.smartenforcer.SECode;

import kr.go.distep.cmmn.util.Util;

public class UserInterceptor extends HandlerInterceptorAdapter {
	
	//@Resource(name = "adminService")
	//private AdminService adminService;
	//  인증 체크가 필요 없는 URL 리스트  
	List<String> urls;
	public void setUrls(List urls) {
		this.urls = new ArrayList<String>();
		//for-loop 통한 전체 조회
        for(Object object : urls) {            
            this.urls.add((String) object);
        }

	}

	private static final Logger LOGGER = LoggerFactory.getLogger(UserInterceptor.class);
    
	/**
	 * 컨트롤러 클래스를 호출하기전에 실행(세션확인을 위해 사용할 메소드다)
	 * @throws IOException 
	 * @throws Exception 
	 */
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException, Exception {

		HttpSession session = request.getSession(true);
		@SuppressWarnings("unchecked")
		
		Map<String, Object> userSession = (Map<String, Object>) session.getAttribute("ssUsr");
		// 인증 체크가 필요 없는 URL 체크
		for(int i=0; i < urls.size(); i++){
			if (request.getRequestURI().matches(urls.get(i))) {
				//인증 체크가 필요없는 URL
				return true;
			}
		}
		
		/**
		 * -----------------------------------------------------
		 * 전주기 SSO 로그인 처리 시작
		 * -----------------------------------------------------
		 */
		
		//SSOApiManager ssoApi = new SSOApiManager();
//		CookieManager.setEncStatus(true);
		//String ssoId = Util.getSsoId(request);
//		String ssoId = CookieManager.getCookieValue(SECode.USER_ID, request);
		String ssoId = "";
		
		LOGGER.info("ssoUserId = " + ssoId);
		
		if (ssoId == null) {
			session.removeAttribute("ssUsr");
			userSession = null;
        } else if(ssoId != null) {	
        	String ssoUserNm="";
			
			try {
				ssoUserNm = this.getUserTHInfo(ssoId, "PSN_NM");
				LOGGER.info("ssoUserNm = " + ssoUserNm);
			} catch (UnsupportedEncodingException e1) {
				
				LOGGER.info("UnsupportedEncodingException");
			} catch (Exception e1) {	
			}
			
            if (session.getAttribute("ssUsr") == null) {

            	LOGGER.info("유저 세션이 존재하지 않는 경우");
            	//관리자인지 확인
            	String chkAdmin = getCheckAdmin(ssoId);
            	
            	Map<String,String> usrMap = new HashMap<String, String>();

            	String referer = request.getHeader("REFERER");
            	
            	if(referer != null && referer.indexOf("/data") >= 0) {
            		session.setAttribute("chartView", "Y");
            	}else {
            		session.setAttribute("chartView", "N");
            	}
            	
            	usrMap.put("ssoUserId",ssoId);
            	usrMap.put("ssoUserNm",ssoUserNm);
            	usrMap.put("isAdmin",chkAdmin);
            	session.setAttribute("ssUsr", usrMap);
				
            } 
            
		}
		String requestURI = request.getRequestURI();//요청 URI

		if (requestURI.indexOf("techview/admin") < 0) {
			String menuCd ="";
			String menuNm ="";
			
		}
        if (requestURI.indexOf("/index.do") > -1) {
            return true;
        } else {
        	// 위의 예외페이지 외에는 세션값을 체크해서 있으면 페이지표시
            if (userSession != null && !userSession.isEmpty()) {
            	if("Y".equals(userSession.get("isAdmin"))){
            		//관리자일 경우 모두 패스
            		return true;
            	}else{
            		//관리자가 아닌 경우는 관리자 페이지에 접속하지 못함
            		if (getAdminUriList(requestURI)) {
            			//Util.alertMgntMsg(response, "관리자 권한이 아닙니다.");
            			return false;
                    }else{
                    	return true;
                    } 
            	}
            } else {
				// 정상적인 세션정보가 없으면 로그인페이지로 이동
            	Util.alertGotoBack(response, "로그인이 필요합니다. 로그인해주세요.");
            	return false;
//				ModelAndView modelAndView = new ModelAndView("redirect:/index.do");
//				throw new ModelAndViewDefiningException(modelAndView);
            }
        }
		    
	}
	
	
	/**
	 * 
	 * 회원정보 조회(사용자ID, 항목명 )
	 * 
	 * @param userid
	 * @param column
	 * @return
	 * @throws UnsupportedEncodingException
	 * @version Update History
	 * <pre>
	 * ---------------------------------------------------------------------------------------
	 * - 정정일자 :
	 * - 정 정 자 :
	 * - 정정내용 :
	 * ---------------------------------------------------------------------------------------
	 * </pre>
	 */
	public static String getUserTHInfo(String userid, String column) throws IOException, Exception {
    	String returnVal = "";
		String authHost = "https://sso1.ntis.go.kr";
		String authURL = "/3rdParty/sso/userInfoApi.jsp";
		String reqStr = "user_id=" + userid + "&user_col=" + column;	
		String returnString = "";    //querySSO(authHost, authURL, reqStr);
		try {
			System.setProperty("https.protocols", "TLSv1.2");
			System.setProperty("jsse.enableSNIExtension", "false");
			URL url = new URL(authHost + authURL + "?" + reqStr);
			HttpURLConnection con = (HttpURLConnection) url.openConnection(); 
			con.setConnectTimeout(1000);
			con.setReadTimeout(1000);
			con.setRequestMethod("GET");
			con.setDoOutput(false); 

			StringBuilder sb = new StringBuilder();
			String line;
			if (con.getResponseCode() == HttpURLConnection.HTTP_OK) {
				BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), "utf-8"));
				while ((line = br.readLine()) != null) {
					sb.append(line);
				}
				br.close();
			} else {
				
			}
			returnString = sb.toString();
			if(returnString != null && !"".equals(returnString)) { 
				returnVal = CookieManager.decryptWithSEED(URLDecoder.decode(returnString, "UTF-8"));
			}else {
				returnVal = "";
			}
			
			System.out.println("returnVal===R:" + returnVal);
		}catch(IOException iee) {
			System.out.println("returnVal===I:" + returnVal);
			throw iee;
		}catch(Exception ee) {
			System.out.println("returnVal===E:" + returnVal);
			throw ee;
		}
		return returnVal;
	}
	
	/*
	 * 관리자정보 테이블을 조회해서 관리자인지 확인
	 * 
	 * */
	private String getCheckAdmin(String userId) {
		String admYn = "N";
		//관리자 아이디
		if(userId.equals("kos7541")) {
			admYn = "Y";
		}else {
			admYn = "N";
		}
		return admYn;
	}
	
	//기간 체크
	private boolean checkPsblPeriod(String startDt, String endDt) {

        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd", Locale.KOREA);

        Date today = new Date();
        Date sDt = null;
        Date eDt = null;

        try {
            sDt = format.parse(startDt);
            eDt = format.parse(endDt);
        } catch (java.text.ParseException e) {
            LOGGER.error("error = "+e);
        }

        if (today.compareTo(sDt) > 0 && eDt.compareTo(today) > 0) {
            return true;
        } else {
            return false;
        }
    }
    
	/*
	 * 관리자가 아닌 경우 특정URI를 접속을 할 수 없도록 URI 리스트 체크
	 * */
	private boolean getAdminUriList(String requestURI){
		
		List<String> uriList = new ArrayList<String>();
		uriList.add("AdminMgnt");
		uriList.add("selectDictionary");
		uriList.add("selectLog");
		
		for(String uri : uriList){
			if(requestURI.indexOf(uri) > -1){
				return true;
			}
		}
		
		return false;
	}
	
}
