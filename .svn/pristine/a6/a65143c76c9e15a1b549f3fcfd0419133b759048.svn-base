package kr.go.distep.main.service.impl;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.go.distep.cmmn.file.vo.FileDetailVO;
import kr.go.distep.cmmn.file.vo.FileGroupVO;
import kr.go.distep.main.service.UploadService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class UploadServiceImpl implements UploadService {

    @Autowired
    FileGroupMapper fileGroupMapper;

    @Override
    public long multiImageUpload(MultipartFile[] multipartFiles) {
        long fileGroupNo = 0L;
        int result = 0;
        int counter = 0;
        File uploadPath = new File("C:\\resources\\upload\\", getFolder());

        if (!uploadPath.exists()) {
            uploadPath.mkdirs();
        }

        FileGroupVO fileGroupVO = new FileGroupVO();
        result += fileGroupMapper.insertFileGroup(fileGroupVO);
        fileGroupNo = fileGroupVO.getFileGroupNo();

        for (MultipartFile multipartFile : multipartFiles) {
            try {
                String originalName = multipartFile.getOriginalFilename();
				String fileName = /* UUID.randomUUID().toString() + "_" + */ originalName;
                File saveFile = new File(uploadPath, fileName);
                multipartFile.transferTo(saveFile);

                FileDetailVO fileDetailVO = new FileDetailVO();
                //fileDetailVO.setFileSn(++counter);
                fileDetailVO.setFileGroupNo(fileGroupNo);
                fileDetailVO.setFileOriginalName(originalName);
                fileDetailVO.setFileSaveName(fileName);
                fileDetailVO.setFileSaveLocate("/resources/upload/" +
                        getFolder().replace("\\", "/") + "/" + fileName);
                fileDetailVO.setFileSize(multipartFile.getSize());
                fileDetailVO.setFileExt(fileName.substring(fileName.lastIndexOf(".") + 1));
                fileDetailVO.setFileMime(multipartFile.getContentType());
                fileDetailVO.setFileFancySize(makeFancySize(String.valueOf(multipartFile.getSize())));
                fileDetailVO.setFileSaveDate(null);
                fileDetailVO.setFileDownCount(0);
                fileDetailVO.setFileType("GENERAL");

                log.info(">> fileName: {}", fileName);
                log.info(">> originalName: {}", originalName);
                log.info(">> fileDetailVO: {}", fileDetailVO);
                log.info(">> inserting to DB...");

                result += fileGroupMapper.insertFileDetail(fileDetailVO);
                log.info(">> insert result: {}", result);

            } catch (IllegalStateException | IOException e) {
                log.error("파일 저장 중 오류", e);
            }
        }

        return fileGroupNo;
    }

    @Override
    public void appendFilesToGroup(long fileGroupNo, MultipartFile[] multipartFiles) {
        int counter = fileGroupMapper.countFilesInGroup(fileGroupNo);
        File uploadPath = new File("C:\\resources\\upload\\", getFolder());

        if (!uploadPath.exists()) {
            uploadPath.mkdirs();
        }

        for (MultipartFile multipartFile : multipartFiles) {
            try {
                String originalName = multipartFile.getOriginalFilename();
				String fileName = /* UUID.randomUUID().toString() + "_" + */ originalName;
                File saveFile = new File(uploadPath, fileName);
                multipartFile.transferTo(saveFile);

                FileDetailVO fileDetailVO = new FileDetailVO();
                //fileDetailVO.setFileSn(++counter);
                fileDetailVO.setFileGroupNo(fileGroupNo);
                fileDetailVO.setFileOriginalName(originalName);
                fileDetailVO.setFileSaveName(fileName);
                fileDetailVO.setFileSaveLocate("/resources/upload/" +
                        getFolder().replace("\\", "/") + "/" + fileName);
                fileDetailVO.setFileSize(multipartFile.getSize());
                fileDetailVO.setFileExt(fileName.substring(fileName.lastIndexOf(".") + 1));
                fileDetailVO.setFileMime(multipartFile.getContentType());
                fileDetailVO.setFileFancySize(makeFancySize(String.valueOf(multipartFile.getSize())));
                fileDetailVO.setFileSaveDate(null);
                fileDetailVO.setFileDownCount(0);

                fileGroupMapper.insertFileDetail(fileDetailVO);

            } catch (IllegalStateException | IOException e) {
                log.error("파일 추가 저장 중 오류", e);
            }
        }
    }

    @Override
    public void deleteFileById(long fileId) {
        FileDetailVO file = fileGroupMapper.selectFileById(fileId);
        if (file != null) {
            File diskFile = new File("C:\\resources\\upload" + file.getFileSaveLocate().replace("/resources/upload", ""));
            if (diskFile.exists()) {
                diskFile.delete();
            }
            fileGroupMapper.deleteFileById(fileId);
        }
    }

    @Override
    public String getFolder() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String str = sdf.format(new Date());
        return str.replace("-", File.separator);
    }

    @Override
    public String makeFancySize(String bytes) {
        log.info("bytes : " + bytes);
        String retFormat = "0";
        Double size = Double.parseDouble(bytes);

        String[] s = { "bytes", "KB", "MB", "GB", "TB", "PB" };

        if (!"0".equals(bytes)) {
            int idx = (int) Math.floor(Math.log(size) / Math.log(1024));
            DecimalFormat df = new DecimalFormat("#,###.##");
            double ret = ((size / Math.pow(1024, Math.floor(idx))));
            retFormat = df.format(ret) + " " + s[idx];
        } else {
            retFormat += " " + s[0];
        }

        return retFormat;
    }

    @Override
    public boolean checkImageType(File file) {
        try {
            String contentType = Files.probeContentType(file.toPath());
            log.info("contentType : " + contentType);
            return contentType != null && contentType.startsWith("image");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public FileGroupVO getFileGroupWithDetails(long fileGroupNo) {
        FileGroupVO group = new FileGroupVO();
        group.setFileGroupNo(fileGroupNo);
        group.setFileDetailVOList(fileGroupMapper.selectFilesByGroupNo(fileGroupNo));
        return group;
    }

    @Override
    public void appendSingleFileToGroup(long groupNo, MultipartFile file, String fileType) {
        File uploadPath = new File("C:\\resources\\upload\\", getFolder());

        if (!uploadPath.exists()) {
            uploadPath.mkdirs();
        }

        try {
            String originalName = file.getOriginalFilename();
			String fileName = /* UUID.randomUUID().toString() + "_" + */originalName;
            File saveFile = new File(uploadPath, fileName);
            file.transferTo(saveFile);

            FileDetailVO fileDetailVO = new FileDetailVO();
            fileDetailVO.setFileGroupNo(groupNo);
            fileDetailVO.setFileOriginalName(originalName);
            fileDetailVO.setFileSaveName(fileName);
            fileDetailVO.setFileSaveLocate("/resources/upload/" +
                    getFolder().replace("\\", "/") + "/" + fileName);
            fileDetailVO.setFileSize(file.getSize());
            fileDetailVO.setFileExt(fileName.substring(fileName.lastIndexOf(".") + 1));
            fileDetailVO.setFileMime(file.getContentType());
            fileDetailVO.setFileFancySize(makeFancySize(String.valueOf(file.getSize())));
            fileDetailVO.setFileSaveDate(null);
            fileDetailVO.setFileDownCount(0);
            fileDetailVO.setFileType("GENERAL");
            fileGroupMapper.insertFileDetail(fileDetailVO);

        } catch (IllegalStateException | IOException e) {
            log.error("단일 파일 추가 저장 중 오류", e);
        }
    }


	@Override
	public long uploadSingleFile(MultipartFile file, String fileType) {
	    long fileGroupNo = 0L;
	    File uploadPath = new File("C:\\resources\\upload\\", getFolder());

	    if (!uploadPath.exists()) {
	        uploadPath.mkdirs();
	    }

	    FileGroupVO fileGroupVO = new FileGroupVO();
	    fileGroupMapper.insertFileGroup(fileGroupVO);
	    fileGroupNo = fileGroupVO.getFileGroupNo();

	    try {
	        String originalName = file.getOriginalFilename();
			String fileName = /* UUID.randomUUID().toString() + "_" + */ originalName;
	        File saveFile = new File(uploadPath, fileName);
	        file.transferTo(saveFile);

	        FileDetailVO fileDetailVO = new FileDetailVO();
	        fileDetailVO.setFileGroupNo(fileGroupNo);
	        fileDetailVO.setFileOriginalName(originalName);
	        fileDetailVO.setFileSaveName(fileName);
	        fileDetailVO.setFileSaveLocate("/resources/upload/" +
	                getFolder().replace("\\", "/") + "/" + fileName);
	        fileDetailVO.setFileSize(file.getSize());
	        fileDetailVO.setFileExt(fileName.substring(fileName.lastIndexOf(".") + 1));
	        fileDetailVO.setFileMime(file.getContentType());
	        fileDetailVO.setFileFancySize(makeFancySize(String.valueOf(file.getSize())));
	        fileDetailVO.setFileSaveDate(null);
	        fileDetailVO.setFileDownCount(0);
	        fileDetailVO.setFileType(fileType); // <- "THUMBNAIL"

	        fileGroupMapper.insertFileDetail(fileDetailVO);

	    } catch (IllegalStateException | IOException e) {
	        log.error("단일 파일 업로드 중 오류", e);
	    }

	    return fileGroupNo;
	}


}
