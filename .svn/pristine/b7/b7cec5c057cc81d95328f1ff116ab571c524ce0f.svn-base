<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.css' rel='stylesheet' />

<style>
	#content{
		    width: 80%;
    		margin: 0 auto;
			margin-bottom: 5%;
			margin-top: 2%;
	}
	.conts-area {
	    margin-bottom: 5%;
	}
	.thumb-sec{
		display: flex;
	    height: 50vh;
	    border: solid gray 1px;
	    align-items: center;
	    overflow: hidden;
	    justify-content: center;
	    border-radius: 10px;
	}
</style>
<body>
<c:if test="${empty sessionScope.loggedInUser}">
	<script type="text/javascript">
		alert("You can use it after logging in.");
		location.href = "${pageContext.request.contextPath}/login.do";
	
	</script>
</c:if>
<!-- 컨테이너 영역 -->
<div id="container">
			<div class="page-title-wrap visual img-members">
				<div class="visual-filter"></div>
				<div class="inner">
					<!-- breadcrumb -->
					<nav class="breadcrumb-wrap" aria-label="브레드크럼">
						<ol class="breadcrumb">
							<li class="home"><a href="#" class="txt">Home</a></li>
							<li><a href="#" class="txt">
						    <c:choose>
						        <c:when test="${param.boardMasterCode == 'N01' 
						                       or param.boardMasterCode == 'N02' 
						                       or param.boardMasterCode == 'N03'}">
						            News
						        </c:when>
						        <c:when test="${param.boardMasterCode == 'N05' 
						                       or param.boardMasterCode == 'N06'}">
						            Members Area
						        </c:when>
						        <c:otherwise>
						            -
						        </c:otherwise>
						    </c:choose>
							</a></li> 
							<li><c:choose>
						        <c:when test="${param.boardMasterCode == 'N01' }">
						            GINI News
						        </c:when>
						        <c:when test="${param.boardMasterCode == 'N02' }">
						            Members News
						        </c:when>
						        <c:when test="${param.boardMasterCode == 'N03' }">
						            Media Release
						        </c:when>
						        <c:when test="${param.boardMasterCode == 'N05' }">
						            Members
						        </c:when>
						        <c:when test="${param.boardMasterCode == 'N06' }">
						            Action Group
						        </c:when>
						        <c:otherwise>
						            -
						        </c:otherwise>
						    </c:choose></li>
							<li><a href="#" class="txt">Create a Post</a></li>
						</ol>
					</nav>
					<!-- breadcrumb -->
					<!-- 페이지 타이틀 영역 -->
					<div class="visual-area">
						<h2 class="h-tit">Create a Post</h2>
						<p>Create a Post</p>
					</div>
				<!-- //페이지 타이틀 영역 -->
				</div>
			</div>  
			<!-- breadcrumb -->
			
			
		<form class="form-horizontal" id="form" name="form" action="${pageContext.request.contextPath}/board/boardInsert.do"
			method="post" enctype="multipart/form-data"   onsubmit="return validateFormAndSubmit()"> <!--  여기에 onsubmit 추가 -->
			<div class="inner">
				<div class="conts-area">
					<div class="conts-detail-wrap txt-box bg-white board-insert">
						<!-- real contents -->
						<div class="conts-wrap scroll-check">
							<div class="conts-wrap section-link" id="section_01">
								<!-- table list -->
								<div class="tbl-wrap">
									<dl class="tbl def-list">
										<dt class="form-tit">
											<label for="edit_title">Title</label>
										</dt>
										<dd>
											<div class="form-conts">
												<input type="text" id="edit_title" maxlength="150" class="form-control" autocomplete="on" placeholder="title" name="title">
											</div>
										</dd>
										<dt class="form-tit">
										    <label for="boardMasterCode">Category</label>
										</dt>
										<dd>
											<input type="hidden" id="boardMasterCodeInput" name="boardMasterCode" value="" />
										    <select id="boardMasterCode" class="form-control boardMasterCode" onchange="toggleThumbnailField(this.value)">
										        <option value="N01">GINI News</option>
										        <option value="N02">Members News</option>
										        <option value="N03">Media Release</option>
										        <option value="N04">Q&A</option>
										        <option value="N05">Members</option>
										        <option value="N06">Action Group</option>
										        <option value="A01">Publications</option>
										    </select>
										</dd>
										<dt class="form-tit"> 
											<label for="edit_content">Content</label>
										</dt>
										<dd>
											<div class="form-conts">
												<textarea rows="10" cols="50" id="edit_content"  maxlength="10000" class="form-control" name="content" placeholder="content" ></textarea>
											</div>
										</dd>
										<dt class="form-tit thumbnail-field">
										    <label for="edit_upload">Thumbnail Attachments</label>
										</dt>
										<dd class="thumbnail-field">
										    <div class="form-group margin-b">
										        <div class="form-tit lg thumb-sec">
										          <div id="thumbnailText" style="color: #888;">Select an image.</div>
												   <img id="thumbnailPreviewImg"
													  class="img-fluid imgFileSaveLocate thumbnail-preview"
													  style="cursor: pointer; display: none;"
													  src=""
													  alt="Thumbnail Preview" />

										        </div>
										        <div class="form-conts row thumb-tsec">
										            <input id="fileNm" type="text" maxlength="16" class="form-control" placeholder="Thumbnail file name" readonly>
										            <button type="button" class="btn lg secondary" onclick="document.getElementById('thumbnail').click()"> Search </button>
										        </div>
										        <p class="form-hint info">Allow up to 20MB</p>
										     <!--    <input type="file" name="thumbnailFile" id="thumbnail" style="display:none;" onchange="setThumbnailFileName();  previewThumbnail(event);"  />   -->
										     <input type="file" name="thumbnailFile" id="thumbnail" style="display:none;" onchange="handleThumbnailChange(event)" />

										     
										    </div>
										</dd>
										<dt class="form-tit">
											<label for="edit_upload">File <br> Attachments</label>
										</dt>
										<dd>
										
											<div class="gini-cont-box">
											<div class="row">
												<!-- 파일업로드 -->
												<div class="file-upload cont50">
													<p class="txt">Click the Choose File button to select a file.</p>
													<button type="button" class="btn primary ico-before ico-upload md" onclick="document.getElementById('uploadFiles').click()">Choose File</button>
													<input type="file" id="uploadFiles" name="uploadFiles" multiple style="display:none;"  onchange="handleFileUpload(event)" >
											
												</div>
												<div class="file-upload-result cont50">
													<div class="upload-top">
														<div class="file-total"><span class="current">0</span> / 6</div>
													</div>
													<ul class="upload-list" id="fileListArea">
													</ul>
													<div class="upload-delete-btn">
														<button type="button" class="btn btn-txt ico-before ico-del sm h-auto " onclick="deleteAllFiles()">Delete All Files</button>
													</div>
												</div>
												<!-- //파일업로드 리스트 -->
												<!-- //폼그룹 -->
											</div>
											
										</div>
										</dd>
									</dl>
								</div>
							</div>
						</div>
						<!-- //real contents -->
						 <div class="page-btn-wrap both">
							<div>
							
							<button type="button" class="btn lg" onclick="history.back()">Back to List</button>
							
							</div>
							<div>
								<button type="submit" class="btn lg tertiary">Create Post</button>
										 
							</div>
						</div>
					</div>
				</div>
			</form>
		</div>
		<!-- //컨테이너 영역 -->
</body>

<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js'></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/locales/ko.global.min.js"></script>
<script type="text/javascript">

	let uploadedFiles = [];
	let selectedThumbnailFile = null;  // 마지막으로 선택된 썸네일
	/* 썸네일 유지 함수  */
	function handleThumbnailChange(event) {
	  const input = event.target;
	  const fileNameInput = document.getElementById("fileNm");
	  const previewImg = document.getElementById("thumbnailPreviewImg");
	  const textGuide = document.getElementById("thumbnailText");

	  if (!input.files || input.files.length === 0) {
	    if (!selectedThumbnailFile) {
	      if (previewImg) { previewImg.src = ""; previewImg.style.display = "none"; }
	      if (textGuide) { textGuide.style.display = "block"; }
	      if (fileNameInput) { fileNameInput.value = ""; }
	    }
	    return;
	  }

	  // 파일을 선택한 경우 갱신
	  const file = input.files[0];
	  const fileName = file.name;
	  const extension = fileName.split('.').pop().toLowerCase();
	  const allowedExtensions = ['jpg', 'jpeg', 'png'];

	  if (!allowedExtensions.includes(extension)) {
	    alert("Only image files (JPG, JPEG, PNG) are allowed as thumbnails.");
	    input.value = '';
	    return;
	  }

	  //  프리뷰 표시
	  selectedThumbnailFile = file;
	  if (fileNameInput) fileNameInput.value = fileName;

	  const reader = new FileReader();
	  reader.onload = function (e) {
	    if (previewImg) {
	      previewImg.src = e.target.result;
	      previewImg.style.display = 'block';
	    }
	    if (textGuide) textGuide.style.display = 'none';
	  };
	  reader.readAsDataURL(file);
	}

	function previewThumbnail(event) {
		  const input = event.target;
		  const previewImg = document.getElementById('thumbnailPreviewImg');
		  const textGuide = document.getElementById('thumbnailText');
	
		  if (input.files && input.files[0]) {
		    const reader = new FileReader();
		    reader.onload = function (e) {
		      previewImg.src = e.target.result;
		      previewImg.style.display = 'block';
		      textGuide.style.display = 'none'; 
		    };
		    reader.readAsDataURL(input.files[0]);
		  } else {
		    previewImg.src = '';
		    previewImg.style.display = 'none';
		    textGuide.style.display = 'block';
		  }
		}
	
	function setThumbnailFileName() {
	    const fileInput = document.getElementById("thumbnail");
	    const fileNameInput = document.getElementById("fileNm");
	
	    if (fileInput.files.length > 0) {
	        const file = fileInput.files[0];
	        const fileName = file.name;
	        const extension = fileName.split('.').pop().toLowerCase();
	        const allowedExtensions = ['jpg', 'jpeg', 'png'];
	
	        if (!allowedExtensions.includes(extension)) {
	            alert("Only image files (JPG, JPEG, PNG) are allowed as thumbnails.");
	            fileInput.value = ''; 
	            fileNameInput.value = '';
	            return;
	        }
	
	        fileNameInput.value = fileName;
	    } else {
	        fileNameInput.value = "";
	    }
	}
	
	function getParameterByName(name) {
	    const url = window.location.href;
	    const regex = new RegExp('[?&]' + name + '=([^&#]*)');
	    const results = regex.exec(url);
	    return results ? decodeURIComponent(results[1].replace(/\+/g, ' ')) : null;
	  }
	
	function toggleThumbnailField(code) {
		  const fields = document.querySelectorAll(".thumbnail-field");
		  const showCodes = ["N01", "N02", "N03", "A01"];
		  const shouldShow = showCodes.includes(code);
	
		  fields.forEach(function(field) {
		    field.style.display = shouldShow ? "block" : "none";
		  });
	
		  if (!shouldShow) {
			  const fileInput = document.getElementById("thumbnail");
			  const fileNameInput = document.getElementById("fileNm");
			  const previewImg = document.getElementById("thumbnailPreviewImg");
			  const textGuide = document.getElementById("thumbnailText");

			  if (fileInput) fileInput.value = "";
			  if (fileNameInput) fileNameInput.value = "";
			  if (previewImg) { previewImg.src = ""; previewImg.style.display = "none"; }
			  if (textGuide) textGuide.style.display = "block";

			  selectedThumbnailFile = null; // ← 추가
			}
		}
	
	
	// 최초 페이지 로드 시 적용
	document.addEventListener("DOMContentLoaded", function() {
		const boardMasterCode = getParameterByName("boardMasterCode");
	    const selectBox = document.getElementById("boardMasterCode");
	
	    if (boardMasterCode && selectBox) {
	      // select 박스 자동 선택
	      selectBox.value = boardMasterCode;
	
	      // 필드 표시/숨김 처리
	      toggleThumbnailField(boardMasterCode);
	
	      $('#boardMasterCodeInput').val(boardMasterCode);
	      
	      // 선택 못하게 막기
	      selectBox.setAttribute("disabled", "disabled");
	    }
	});
	
	
	
	function formatBytes(bytes) {
	  if (bytes === 0) return '0KB';
	  const k = 1024;
	  const i = Math.floor(Math.log(bytes) / Math.log(k));
	  const size = parseFloat((bytes / Math.pow(k, i)).toFixed(1));
	  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
	  return `\${size} \${sizes[i]}`;
	}
	
	function updateFileCount() {
	  const countSpan = document.querySelector('.file-total .current');
	  const validCount = uploadedFiles.length;
	  countSpan.textContent = `\${validCount}`;
	}
	
	function deleteAllFiles() {
	  uploadedFiles = [];
	  const fileListArea = document.getElementById('fileListArea');
	  fileListArea.innerHTML = '';
	  updateFileCount();
	}
	
	function handleFileUpload(event) {
	  const files = event.target.files;
	  const fileListArea = document.getElementById('fileListArea');
	  const allowedExtensions = [
    	  'pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt',
    	  'jpg', 'jpeg', 'png', 'gif', 'zip', 'hwp'
    	];
	  
	  const maxSize = 20 * 1024 * 1024; // 20MB

	  for (let i = 0; i < files.length; i++) {
	    const file = files[i];

	    if (!files || files.length === 0) {
	      console.warn("No file was selected.");
	      return;
	    }

	    const extension = file.name.split('.').pop().toLowerCase();
	    const li = document.createElement('li');
	   	let rpext = '.'+ extension
	    let fileName = file.name.replace(rpext , '')
	    li.classList.add('is-error');

	    if (!allowedExtensions.includes(extension)) {
	      li.innerHTML = ''
	        + '<div class="in">'
	        +   '<div class="file-name">' + fileName + ' [' + extension + ', ' + formatBytes(file.size) + ']</div>'
	        +   '<div class="file-btn">'
	        +     '<span class="ico-invalid error"><em class="sr-only">에러</em></span>'
	        +     '<button type="button" class="btn btn-txt ico-before ico-del sm h-auto" '
	        +     'onclick="this.closest(\'li\').remove(); updateFileCount();">Delete</button>'
	        +   '</div>'
	        + '</div>'
	        + '<p class="file-hint">Only the following file types can be uploaded:<br>'
	        + 'pdf, doc, docx, xls, xlsx, ppt, pptx, txt, jpg, jpeg, png, gif, zip, hwp</p>';

	      fileListArea.appendChild(li);
	      continue;
	    }

	    if (file.size > maxSize) {
	      li.innerHTML = ''
	        + '<div class="in">'
	        +   '<div class="file-name">' + fileName + ' [' + extension + ', ' + formatBytes(file.size) + ']</div>'
	        +   '<div class="file-btn">'
	        +     '<span class="ico-invalid error"><em class="sr-only">에러</em></span>'
	        +     '<button type="button" class="btn btn-txt ico-before ico-del sm h-auto" '
	        +     'onclick="this.closest(\'li\').remove(); updateFileCount();">Delete</button>'
	        +   '</div>'
	        + '</div>'
	        + '<p class="file-hint">The file size that can be registered has been exceeded.<br>'
	        + 'Only files less than 20MB can be registered.</p>';

	      fileListArea.appendChild(li);
	      continue;
	    }

	    if (uploadedFiles.length >= 6) {
	      alert("You can register up to 6 files.");
	      break;
	    }

	    // 정상 파일 처리
	    uploadedFiles.push(file);
	    const liSuccess = document.createElement('li');
	    console.log("filename",fileName)
	    console.log("extension",extension)
	    liSuccess.innerHTML = ''
	      + '<div class="in">'
	      +   '<div class="file-name">' + fileName + ' [' + extension + ', ' + formatBytes(file.size) + ']</div>'
	      +   '<div class="file-btn">'
	      +     '<button type="button" class="btn btn-txt ico-before ico-del sm h-auto" '
	      +     'onclick="deleteThisFile(this, \'' + file.name.replace(/'/g, "\\'") + '\')">Delete</button>'
	      +   '</div>'
	      + '</div>';
	    fileListArea.appendChild(liSuccess);
	  }
	  updateFileCount();

	}
	function deleteThisFile(button, fileName) {
		  uploadedFiles = uploadedFiles.filter(file => file.name !== fileName);
		  button.closest('li').remove();
		  updateFileCount();
		}
	
	function deleteSingleFile(index, button) {
	  uploadedFiles.splice(index, 1);
	  button.closest('li').remove();
	  updateFileCount();
	}
	function escapeForJs(str) {
		  return str
		    .replace(/\\/g, '\\\\') 
		    .replace(/"/g, '\\"')   
		    .replace(/'/g, "\\'");  
		}
	
	function validateFormAndSubmit() {
	    var title = document.forms["form"]["title"].value.trim();
	    var content = document.forms["form"]["content"].value.trim();
	    var boardMasterCode = document.querySelector(".boardMasterCode").value.trim();
	    
	    if (title === "") { alert("Please enter a title."); return false; }
		 if (title.length > 150) { alert("The title must be no more than 100 characters."); return false; } 
		if (title.length < 10) { alert("The title must be at least 10 characters long."); return false; }
		
		if (content === "") { alert("Please enter content."); return false; }
		if (content.length < 10) { alert("The content must be at least 10 characters."); return false; }
		if (content.length > 10000) { alert("The content must be no more than 10000 characters."); return false; }
		
	    const thumbnailField = document.querySelector(".thumbnail-field");
	    if (thumbnailField && thumbnailField.style.display !== "none" && !selectedThumbnailFile) {
	      alert("Please upload a thumbnail image.");
	      return false;
	    }
	    const safeTitle = escapeForJs(title);
	    const safeContent = escapeForJs(content);
	
	    
	    const formData = new FormData();
	
	    formData.append("title", safeTitle);
	    formData.append("content", safeContent);
	    formData.append("boardMasterCode", boardMasterCode);
	
	    // 반 파일 업로드 추가
	    uploadedFiles.forEach(file => {
	        formData.append("uploadFiles", file);
	    });
	
	    // 썸네일 파일 추가
	   if (selectedThumbnailFile) {
		  formData.append("thumbnailFile", selectedThumbnailFile);
		}
	    
	    const errorItems = document.querySelectorAll('#fileListArea li.is-error');
	    if (errorItems.length > 0) {
	        alert("There is an invalid file in the attachment list. Please delete it.");
	        return false;
	    }
	    let url = '${pageContext.request.contextPath}/board/boardInsert.do'
	    
	    var contextPath = '${pageContext.request.contextPath}';
	    fetch(contextPath + '/board/boardInsert.do', {
	        method: "POST",
	        body: formData,
	        headers: { "X-Requested-With": "XMLHttpRequest", "Accept": "application/json" }
	    })
	    .then(function(res) {
	        return res.json().catch(function(){ return {}; }).then(function(data) {
	            return {res: res, data: data};
	        });
	    })
	    .then(function(obj) {
	        var res = obj.res;
	        var data = obj.data;
	        if (res.status === 401 || data.reason === 'SESSION_EXPIRED') {
	            alert("Session expired. Please log in.");
	            location.href = contextPath + "/login.do?returnUrl=" + encodeURIComponent(location.href);
	        } else if (res.ok && data.success) {
	            alert("Your post has been successfully submitted.");
	            location.href = contextPath + "/board/boardList.do?boardMasterCode=" + boardMasterCode;
	        } else {
	            alert("Unable to upload the post. Please try again later.");
	            location.href = contextPath + "/board/boardList.do?boardMasterCode=" + boardMasterCode;
	        }
	    })
	    .catch(function() {
	        alert("An unexpected error occurred.");
	    });

	    return false; // 기존 form 제출 막기
	}


</script>
