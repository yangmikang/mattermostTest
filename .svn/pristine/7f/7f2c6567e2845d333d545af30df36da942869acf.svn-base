package kr.go.distep.user.web;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.go.distep.user.service.UserService;
import kr.go.distep.user.vo.UserVO;

@Controller
public class UserController {

	/** logger */
	protected Logger logger = LoggerFactory.getLogger(this.getClass());

	@Resource(name = "userService")
	private UserService userService;
	
	@Resource(name = "passwordEncoder")
	private BCryptPasswordEncoder passwordEncoder;
	
	@Autowired
	private ServletContext servletContext;

	@RequestMapping(value = "/userRegister.do", method = RequestMethod.GET)
	public ModelAndView index(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws IOException, Exception {

		ModelAndView view = new ModelAndView();

		String referer = (String) request.getHeader("REFERER");

		view.addObject("prevURL", referer);
		view.setViewName("user/register");

		return view;
	}

	@RequestMapping(value = "/register.do", method = RequestMethod.POST)
	public String register(UserVO userVO, RedirectAttributes redirectAttributes) throws IOException, Exception {
		
		String rawPassword = userVO.getPassword();
	    String encryptedPassword = passwordEncoder.encode(rawPassword);
	    userVO.setPassword(encryptedPassword);
	    
		userService.register(userVO);
		redirectAttributes.addFlashAttribute("successMessage", "Registration completed successfully.");
		return "redirect:/login.do";
	}
	
	@RequestMapping(value = "/login.do")
	public ModelAndView login(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws IOException, Exception {

		ModelAndView view = new ModelAndView();

		String referer = (String) request.getHeader("REFERER");

		view.addObject("prevURL", referer);
		view.setViewName("user/login");

		return view;
	}
	
	@RequestMapping(value = "/admin.do")
	public ModelAndView admin(@RequestParam(defaultValue = "1") int page, @RequestParam(defaultValue = "10") int size, @RequestParam(required = false) String activeTab, ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws IOException, Exception {

		ModelAndView view = new ModelAndView();
		
		int totalCount = userService.getUserCount();
	    int offset = (page - 1) * size;
		List<UserVO> userList = userService.getUserList(offset, size);
		model.addAttribute("userList", userList);
	    model.addAttribute("currentPage", page);
	    model.addAttribute("offset", offset);
	    model.addAttribute("totalCount", totalCount);
	    model.addAttribute("pageSize", size);
	    model.addAttribute("imgVersion", System.currentTimeMillis());

	    if (activeTab != null) {
	        model.addAttribute("activeTab", activeTab);
	    }
		view.setViewName("user/admin");

		return view;
	}
	
	@RequestMapping("/userLogin.do")
    public String login(@RequestParam("id") String userId,
                        @RequestParam("password") String password,
                        HttpSession session,
                        RedirectAttributes redirectAttributes) throws IOException, Exception {

        UserVO user = userService.findByUserId(userId);

        if (user == null) {
            redirectAttributes.addFlashAttribute("errorMessage", "User ID does not exist.");
            return "redirect:/login.do";
        }

        if (!passwordEncoder.matches(password, user.getPassword())) {
            redirectAttributes.addFlashAttribute("errorMessage", "Incorrect password.");
            return "redirect:/login.do";
        }

        session.setAttribute("loggedInUser", user);
        session.setMaxInactiveInterval(1800);

        return "redirect:/index.do";
    }
	
	@RequestMapping(value = "/logout.do", method = RequestMethod.GET)
	public String logout(HttpSession session) {

	    session.invalidate();

	    return "redirect:/index.do"; 
	}

	@RequestMapping(value = "/checkUserId.do", method = RequestMethod.POST)
	@ResponseBody
	public String checkUserId(@RequestParam("userId") String userId) throws IOException, Exception {
		boolean chkYn = userService.checkUserId(userId);
		return chkYn ? "Y" : "N";
	}
	
	@RequestMapping(value = "/adminImgUpload.do", method = RequestMethod.POST)
	public String uploadMainImage(@RequestParam("imageFile") MultipartFile file, Model model, RedirectAttributes redirectAttributes) throws Exception {

	    if (!file.isEmpty()) {
	        String realPath = servletContext.getRealPath("/img/pattern/content/img_main_content_visual_1.png");
	        File dest = new File(realPath);
	        
	        if (isSameFile(file, dest)) {
	            redirectAttributes.addFlashAttribute("errorMessage", "The uploaded image is the same as the current main image.");
	        } else {
	            file.transferTo(dest);
	        }
	    }

	    return "redirect:/admin.do?activeTab=tab2";
	}
	@RequestMapping(value = "/updateUserRole.do", method = RequestMethod.POST)
	@ResponseBody
	public String updateUserRole(@RequestParam("id") String id, @RequestParam("role") String role) {
	    try {
	        userService.updateUserRole(id, role);
	        return "success";
	    } catch (Exception e) {
	        return "fail";
	    }
	}
	
	public boolean isSameFile(MultipartFile uploadFile, File savedFile) throws Exception {
	    byte[] uploadBytes = uploadFile.getBytes();
	    byte[] savedBytes = Files.readAllBytes(savedFile.toPath());

	    if (uploadBytes.length != savedBytes.length) {
	        return false;
	    }

	    for (int i = 0; i < uploadBytes.length; i++) {
	        if (uploadBytes[i] != savedBytes[i]) {
	            return false;
	        }
	    }
	    return true;
	}

}
