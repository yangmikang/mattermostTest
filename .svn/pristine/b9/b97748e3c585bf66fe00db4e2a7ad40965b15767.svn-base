package kr.go.distep.calendar.service.impl;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.go.distep.calendar.service.CalendarService;
import kr.go.distep.calendar.vo.CalendarVO; 
import kr.go.distep.main.service.UploadService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service("calendarService")
public class CalendarServiceImpl implements CalendarService {

    @Autowired
    private UploadService uploadService;

    @Resource(name = "calendarMapper")
    private CalendarMapper calendarMapper;

    @Override
    @Transactional
    public int registerCalendar(CalendarVO calendar) throws Exception {
        try {
            long fileGroupNo = 0L;

            // 1. 썸네일 업로드
            MultipartFile thumbnailFile = calendar.getThumbnailFile();
            if (thumbnailFile != null && !thumbnailFile.isEmpty()) {
                fileGroupNo = this.uploadService.uploadSingleFile(thumbnailFile, "THUMBNAIL");
                calendar.setFileGroupNo(fileGroupNo); // 파일 그룹 생성됨
            }

            // 2. 일반 파일 업로드
            MultipartFile[] uploadFiles = calendar.getUploadFiles();
            if (uploadFiles != null && Arrays.stream(uploadFiles).anyMatch(file -> file != null && !file.isEmpty())) {
                if (fileGroupNo == 0) {
                    // 썸네일 없이 일반 파일만 있는 경우
                    fileGroupNo = this.uploadService.multiImageUpload(uploadFiles, "GENERAL");
                    calendar.setFileGroupNo(fileGroupNo);
                } else {
                    // 이미 그룹번호 있으므로 append만
                    this.uploadService.appendFilesToGroup(fileGroupNo, uploadFiles, "GENERAL");
                }
            }

            // 3. DB 등록
            log.info("insertCalendar 실행 직전 파라미터: {}", calendar);
            int result = calendarMapper.insertCalendar(calendar);
            log.info("insertCalendar insert result: {}", result);
            return result;

        } catch (Exception e) {
            log.error("registerCalendar 예외: {}", e.getMessage(), e);
            throw new RuntimeException("calendarInsert 실패", e);
        }
    }
//    @Override
//    @Transactional
//    public int registerCalendar(CalendarVO calendar) throws Exception {
//        try {
//            long fileGroupNo = 0L;
//
//            // 1. 파일 그룹 먼저 생성 (썸네일과 일반 파일 함께 저장)
//            MultipartFile thumbnailFile = calendar.getThumbnailFile();
//            MultipartFile[] uploadFiles = calendar.getUploadFiles();
//
//            boolean hasThumbnail = thumbnailFile != null && !thumbnailFile.isEmpty();
//            boolean hasGeneralFiles = uploadFiles != null && Arrays.stream(uploadFiles)
//                    .anyMatch(file -> file != null && !file.isEmpty());
//
//            if (hasThumbnail || hasGeneralFiles) {
//                // 파일 그룹 생성
//                FileGroupVO fileGroupVO = new FileGroupVO();
//               // uploadService.insertFileGroup(fileGroupVO);  // 새 메서드 필요 (insert만)
//                fileGroupNo = fileGroupVO.getFileGroupNo();
//                calendar.setFileGroupNo(fileGroupNo);
//
//                // 1-1. 썸네일 업로드
//                if (hasThumbnail) {
//                    uploadService.appendSingleFileToGroup(fileGroupNo, thumbnailFile, "THUMBNAIL");
//                }
//
//                // 1-2. 일반 파일 업로드
//                if (hasGeneralFiles) {
//                    for (MultipartFile file : uploadFiles) {
//                        if (file != null && !file.isEmpty()) {
//                            uploadService.appendSingleFileToGroup(fileGroupNo, file, "GENERAL");
//                        }
//                    }
//                }
//            }
//
//            // 2. DB 등록
//            log.info("insertCalendar 실행 직전 파라미터: {}", calendar);
//            int result = calendarMapper.insertCalendar(calendar);
//            log.info("insertCalendar insert result: {}", result);
//            return result;
//
//        } catch (Exception e) {
//            log.error("registerCalendar 예외: {}", e.getMessage(), e);
//            throw new RuntimeException("calendarInsert 실패", e);
//        }
//    }


    @Override
    @Transactional
    public int modifyCalendar(CalendarVO calendar) throws Exception {
        try {
            // 1. 삭제 요청 파일 처리
            if (calendar.getDeletedFileIds() != null && !calendar.getDeletedFileIds().isEmpty()) {
                String[] ids = calendar.getDeletedFileIds().split(",");
                for (String idStr : ids) {
                    if (!idStr.trim().isEmpty()) {
                        long fileId = Long.parseLong(idStr.trim());
                        uploadService.deleteFileById(fileId);
                    }
                }
            }

            long groupNo = calendar.getFileGroupNo();

            // 2. 썸네일 업로드 처리
            MultipartFile thumbnailFile = calendar.getThumbnailFile();
            if (thumbnailFile != null && !thumbnailFile.isEmpty()) {
                if (groupNo == 0) {
                    groupNo = uploadService.uploadSingleFile(thumbnailFile, "THUMBNAIL");
                    calendar.setFileGroupNo(groupNo);
                } else {
                    uploadService.appendSingleFileToGroup(groupNo, thumbnailFile, "THUMBNAIL");
                }
            }

            // 3. 일반 파일 업로드 처리
            MultipartFile[] uploadFiles = calendar.getUploadFiles();
            if (uploadFiles != null && uploadFiles.length > 0 && !uploadFiles[0].isEmpty()) {
                if (groupNo == 0) {
                    groupNo = uploadService.multiImageUpload(uploadFiles, "GENERAL"); // 내부적으로 "GENERAL"로 처리되도록 변경
                    calendar.setFileGroupNo(groupNo);
                } else {
                    uploadService.appendFilesToGroup(groupNo, uploadFiles, "GENERAL");
                }
            }

            // 4. DB 업데이트
            return calendarMapper.updateCalendar(calendar);

        } catch (Exception e) {
            log.error("modifyCalendar 예외: {}", e.getMessage(), e);
            throw new RuntimeException("일정 수정 실패", e);
        }
    }


    @Override
    public CalendarVO getCalendar(int id) throws Exception {
        CalendarVO calendar = calendarMapper.selectCalendar(id);
        if (calendar != null) {
            calendar.setFileList(calendarMapper.selectFilesByCalendarId(id));
        }
        return calendar;
    }

    @Override
    public List<CalendarVO> getCalendarList() throws Exception {
        return calendarMapper.selectCalendarList();
    }

    @Override
    public int getTotal(Map<String, Object> getTotal) {
        return calendarMapper.getTotal(getTotal);
    }

    @Override
    public List<CalendarVO> list(Map<String, Object> map) {
        return calendarMapper.list(map);
    }

    @Override
    public int updateTitle(CalendarVO vo) {
        return calendarMapper.updateTitle(vo);
    }

    @Override
    public int updateDates(CalendarVO vo) {
        return calendarMapper.updateDates(vo);
    }

    @Override
    public CalendarVO detail(CalendarVO calendar) {
        return calendarMapper.detail(calendar);
    }

    @Override
    public int removeCalendar(CalendarVO calendar) throws Exception {
        return calendarMapper.removeCalendar(calendar);
    }
}
